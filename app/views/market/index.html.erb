<% content_for :title, "Market" %>
<% content_for :body_class, "market-page" %>

<%= csrf_meta_tags %>

<% content_for :head do %>
  <style>
    @font-face {
      font-family: 'Siege Glyph';
      src: url('<%= asset_path("SiegeGlyphs-Regular.otf") %>') format('opentype');
      font-weight: normal;
      font-style: normal;
    }

    html, body {
      overflow: hidden;
    }

    body.market-page .app-main {
      padding: 0 !important;
      margin: 0 !important;
      max-width: none !important;
      width: 100% !important;
    }
    
    body.market-page .app-container {
      padding: 0 !important;
      margin: 0 !important;
    }
    
    .market-container {
      width: 100vw;
      background: transparent;
      overflow: hidden;
    }
    
    .market {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 100vw;
      height: 100vh;
    }
    
    .market-layer {
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      object-fit: cover;
      transition: filter 0.3s ease;
    }

    .market-layer:nth-child(1) { z-index: 1; }
    .market-layer:nth-child(2) { z-index: 2; }
    .market-layer:nth-child(3) { z-index: 3; }

    .market-dialogue {
      position: fixed;
      top: 20%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 600px;
      max-width: 90vw;
      padding: 40px;
      background: rgba(255, 255, 255, 0.95);
      border: 3px solid #402b20;
      z-index: 1000;
      display: none;
    }

    .market-dialogue.visible {
      display: block;
    }

    .market-dialogue-text {
      font-family: "IM Fell English", serif;
      font-size: 20px;
      color: #402b20;
      text-align: center;
      margin-bottom: 30px;
      line-height: 1.5;
    }

    .market-dialogue-buttons {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-top: 30px;
    }

    .market-dialogue-button {
      padding: 10px 30px;
      background: #402b20;
      color: white;
      border: 2px solid transparent;
      font-family: "IM Fell English", serif;
      font-size: 14px;
      cursor: pointer;
      transition: all 0.2s ease;
      min-width: 140px;
      height: 40px;
      box-sizing: border-box;
    }

    .market-dialogue-button:hover {
      background: #5a3a2a;
      border-color: #8b4513;
    }

    .shop-interface {
      position: fixed;
      top: 30%;
      left: 60%;
      transform: translate(-50%, -50%);
      width: 90vw;
      max-width: 1200px;
      max-height: 85vh;
      padding: 2rem;
      background: rgba(255, 255, 255, 0.95);
      border: 3px solid #402b20;
      z-index: 1001;
      display: none;
      overflow-y: auto;
    }

    .shop-interface.visible {
      display: block;
    }

    .shop-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
      padding-bottom: 1rem 
      border-bottom: 2px solid #402b20;
      position: relative;
    }

    .shop-back-button {
      padding: 8px 20px;
      background: #402b20;
      color: white;
      border: 2px solid transparent;
      font-family: "IM Fell English", serif;
      font-size: 14px;
      cursor: pointer;
      transition: all 0.2s ease;
      box-sizing: border-box;
    }

    .shop-back-button:hover {
      background: #5a3a2a;
      border-color: #8b4513;
    }

    .shop-title {
      font-family: "Jaini", "IM Fell English", serif;
      font-size: 32px;
      color: #402b20;
      margin: 0;
      position: absolute;
      left: 50%;
      transform: translateX(-50%);
    }

    .coins-display {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-family: "IM Fell English", serif;
      font-size: 24px;
      color: #402b20;
      font-weight: 700;
    }

    .coin-icon {
      width: 32px;
      height: 32px;
    }

    .shop-items-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .shop-item-card {
      background: rgba(64, 43, 32, 0.05);
      border: 2px solid #402b20;
      padding: 0.75rem;
      cursor: pointer;
      transition: all 0.2s ease;
      display: flex;
      flex-direction: column;
      align-items: center;
      box-sizing: border-box;
      user-select: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
    }

    .shop-item-card:hover {
      background: rgba(90, 58, 42, 0.1);
      box-shadow: inset 0 0 0 2px #8b4513;
    }

    .shop-item-card.disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .shop-item-image-container {
      width: 100%;
      height: 100px;
      position: relative;
      margin-bottom: 0.5rem;
      overflow: visible;
      display: flex;
      align-items: center;
      justify-content: center;
      pointer-events: none;
    }

    .shop-item-image {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
      pointer-events: none;
    }

    .shop-item-image.cosmetic,
    .shop-item-image.mercenary {
      transform: scale(2.5);
    }

    .shop-item-image.physical {
      min-width: 60%;
      min-height: 60%;
      object-fit: contain;
    }

    .shop-item-meeple-bg {
      position: absolute;
      width: 100%;
      height: 100%;
      object-fit: contain;
      z-index: 0;
      transform: scale(2.5) translateY(-10%) translateX(0.2vw);
    }

    .shop-item-image.has-meeple {
      position: relative;
      z-index: 1;
      transform: scale(2.5) translateY(-10%) translateX(0.2vw);
    }

    .shop-item-image.mercenary {
      transform: scale(2.5) translateY(-10%) translateX(0.2vw);
    }

    .shop-item-name {
      font-family: "IM Fell English", serif;
      font-weight: 700;
      font-size: 0.95rem;
      margin-bottom: 0.5rem;
      text-align: center;
    }

    .shop-item-cost {
      font-family: "IM Fell English", serif;
      color: #8b5a3c;
      font-weight: 700;
      margin-bottom: 0.5rem;
      display: flex;
      align-items: center;
      gap: 0.25rem;
    }

    .shop-item-cost-icon {
      width: 20px;
      height: 20px;
    }

    .shop-item-stock {
      font-size: 0.85rem;
      color: #6b5b4a;
      text-align: center;
    }

    .shop-modal-actions {
      display: flex;
      gap: 1rem;
      justify-content: center;
      margin-top: 1rem;
    }

    .shop-button {
      padding: 10px 30px;
      background: #402b20;
      color: white;
      border: 2px solid transparent;
      font-family: "IM Fell English", serif;
      font-size: 14px;
      cursor: pointer;
      transition: all 0.2s ease;
      min-width: 140px;
      height: 40px;
      box-sizing: border-box;
    }

    .shop-button:hover:not(:disabled) {
      background: #5a3a2a;
      border-color: #8b4513;
    }

    .shop-button:disabled {
      background: #666666;
      color: #999999;
      cursor: not-allowed;
    }

    .shop-item-modal {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 500px;
      max-width: 90vw;
      padding: 2rem;
      background: rgba(255, 255, 255, 0.95);
      border: 3px solid #402b20;
      z-index: 1100;
      display: none;
    }

    .shop-item-modal.visible {
      display: block;
    }

    .shop-item-modal-image-container {
      width: 100%;
      height: 200px;
      position: relative;
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .shop-item-modal-image {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
    }

    .shop-item-modal-meeple-bg {
      position: absolute;
      width: 100%;
      height: 100%;
      object-fit: contain;
      z-index: 0;
    }

    .shop-item-modal-image.has-meeple {
      position: relative;
      z-index: 1;
    }

    .shop-item-modal-title {
      font-family: "Jaini", "IM Fell English", serif;
      font-size: 24px;
      text-align: center;
      margin-bottom: 1rem;
      color: #402b20;
    }

    .shop-item-modal-description {
      font-family: "IM Fell English", serif;
      font-size: 16px;
      line-height: 1.5;
      margin-bottom: 1rem;
      color: #402b20;
    }

    .shop-item-modal-price {
      font-family: "IM Fell English", serif;
      font-size: 20px;
      text-align: center;
      margin-bottom: 1rem;
      color: #8b5a3c;
      font-weight: 700;
    }

    .shop-item-modal-stock {
      text-align: center;
      margin-bottom: 1.5rem;
      color: #6b5b4a;
    }

    .tech-tree-interface {
      position: fixed;
      top: 50%;
      left: 60%;
      transform: translate(-50%, -50%);
      width: 70vw;
      max-width: 1400px;
      height: 85vh;
      background: rgba(255, 255, 255, 0.95);
      border: 3px solid #402b20;
      z-index: 1001;
      display: none;
      flex-direction: column;
    }

    .tech-tree-interface.visible {
      display: flex;
    }

    .tech-tree-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 1.5rem 2rem;
      border-bottom: 2px solid #402b20;
      position: relative;
    }

    .tech-tree-title {
      font-family: "Jaini", "IM Fell English", serif;
      font-size: 32px;
      color: #402b20;
      margin: 0;
      position: absolute;
      left: 50%;
      transform: translateX(-50%);
    }

    .tech-tree-controls {
      display: flex;
      gap: 1rem;
      align-items: center;
      margin-left: auto;
    }

    .device-selector {
      padding: 0.5rem 1rem;
      background: #f5e7b7;
      border: 2px solid #402b20;
      font-family: "IM Fell English", serif;
      font-size: 14px;
      cursor: pointer;
    }

    .tech-tree-viewport {
      flex: 1;
      position: relative;
      overflow: hidden;
      background: #fafafa;
      user-select: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
    }

    .tech-tree-container {
      position: absolute;
      width: 100%;
      height: 100%;
      transform-origin: 0 0;
      transition: transform 0.1s ease-out;
    }

    .tech-tree-edges {
      position: absolute;
      top: 50%;
      left: 50%;
      pointer-events: none;
      overflow: visible;
    }

    .tech-tree-nodes {
      position: absolute;
      top: 50%;
      left: 50%;
      transform-origin: 0 0;
    }

    .tech-node {
      position: absolute;
      background: rgba(64, 43, 32, 0.05);
      border: 2px solid #402b20;
      padding: 1rem;
      width: 140px;
      height: 140px;
      border-radius: 50%;
      cursor: pointer;
      transition: all 0.2s ease;
      box-sizing: border-box;
      transform: translate(-50%, -50%);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
    }

    .tech-node.root-node {
      width: 180px;
      height: 180px;
      background: rgba(139, 69, 19, 0.1);
      border-color: #8b4513;
      border-width: 3px;
    }

    .tech-node:hover:not(.locked):not(.maxed) {
      background: rgba(90, 58, 42, 0.1);
			border-color: #8b4513;
      box-shadow: inset 0 0 0 2px #8b4513;
    }

    .tech-node.locked {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .tech-node.owned {
      background: rgba(139, 69, 19, 0.1);
      border-color: #8b4513;
    }

    .tech-node.maxed {
      background: rgba(139, 69, 19, 0.1);
      border-color: #8b4513;
      cursor: default;
    }

    .tech-node.unaffordable:not(.locked) {
      border-color: #999;
    }

    .tech-node-title {
      font-family: "IM Fell English", serif;
      font-weight: 700;
      font-size: 0.8rem;
      margin-bottom: 0.3rem;
      color: #402b20;
      line-height: 1.1;
      word-break: break-word;
    }

    .tech-node-price {
      font-family: "IM Fell English", serif;
      color: #8b5a3c;
      font-weight: 700;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.2rem;
      margin-bottom: 0.3rem;
      font-size: 0.85rem;
    }

    .tech-node-price-icon {
      width: 14px;
      height: 14px;
    }

    .tech-node-counter {
      font-size: 0.75rem;
      color: #6b5b4a;
    }

    .tech-node-status {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      font-size: 0.75rem;
      padding: 0.25rem 0.5rem;
      border-radius: 3px;
      font-weight: 700;
    }

    .tech-node-status.locked {
      background: #999;
      color: white;
    }

    .tech-node-status.maxed {
      background: #228b22;
      color: white;
    }

    .tech-edge {
      stroke: #402b20;
      stroke-width: 2;
      fill: none;
    }

    .tech-edge.locked {
      stroke: #ccc;
      stroke-dasharray: 5,5;
    }

    .tech-edge.owned {
      stroke: #8b4513;
      stroke-width: 3;
    }

    .zoom-controls {
      position: absolute;
      bottom: 1rem;
      right: 1rem;
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      z-index: 10;
    }

    .zoom-btn {
      width: 40px;
      height: 40px;
      background: #402b20;
      color: white;
      border: 2px solid transparent;
      font-size: 20px;
      cursor: pointer;
      transition: all 0.2s ease;
      box-sizing: border-box;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .zoom-btn:hover {
      background: #5a3a2a;
      border-color: #8b4513;
    }

    .initial-selection-modal {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: white;
      border: 3px solid #402b20;
      padding: 2rem;
      z-index: 20;
      display: none;
    }

    .initial-selection-modal.visible {
      display: block;
    }

    .initial-selection-title {
      font-family: "Jaini", "IM Fell English", serif;
      font-size: 24px;
      color: #402b20;
      margin-bottom: 1rem;
      text-align: center;
    }

    .initial-options {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .initial-option-btn {
      padding: 1rem;
      background: #f5e7b7;
      border: 2px solid #402b20;
      font-family: "IM Fell English", serif;
      cursor: pointer;
      transition: all 0.2s ease;
      text-align: left;
    }

    .initial-option-btn:hover {
      background: #e8d9a3;
      border-color: #8b4513;
    }

    .initial-option-title {
      font-weight: 700;
      margin-bottom: 0.5rem;
    }

    .initial-option-desc {
      font-size: 0.9rem;
      color: #6b5b4a;
    }

    .tech-node-modal {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 500px;
      max-width: 90vw;
      padding: 2rem;
      background: rgba(255, 255, 255, 0.95);
      border: 3px solid #402b20;
      z-index: 1200;
      display: none;
    }

    .tech-node-modal.visible {
      display: block;
    }

    .tech-node-modal-title {
      font-family: "Jaini", "IM Fell English", serif;
      font-size: 24px;
      text-align: center;
      margin-bottom: 1rem;
      color: #402b20;
    }

    .tech-node-modal-description {
      font-family: "IM Fell English", serif;
      font-size: 16px;
      line-height: 1.5;
      margin-bottom: 1rem;
      color: #402b20;
    }

    .tech-node-modal-price {
      font-family: "IM Fell English", serif;
      font-size: 20px;
      text-align: center;
      margin-bottom: 1rem;
      color: #8b5a3c;
      font-weight: 700;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }

    .tech-node-modal-price-icon {
      width: 24px;
      height: 24px;
    }

    .tech-node-modal-info {
      text-align: center;
      margin-bottom: 1.5rem;
      color: #6b5b4a;
      font-family: "IM Fell English", serif;
    }

    .tech-node-modal-status {
      text-align: center;
      margin-bottom: 1rem;
      padding: 0.5rem;
      border-radius: 4px;
      font-weight: 700;
    }

    .tech-node-modal-status.locked {
      background: rgba(153, 153, 153, 0.2);
      color: #666;
    }

    .tech-node-modal-status.maxed {
      background: rgba(34, 139, 34, 0.2);
      color: #228b22;
    }

    .status-modal {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 400px;
      max-width: 90vw;
      padding: 2rem;
      background: rgba(255, 255, 255, 0.95);
      border: 3px solid #402b20;
      z-index: 2000;
      display: none;
      text-align: center;
    }

    .status-modal.visible {
      display: block;
    }

    .status-modal-text {
      font-family: "IM Fell English", serif;
      font-size: 18px;
      color: #402b20;
      margin-bottom: 1.5rem;
      line-height: 1.5;
    }

    .status-modal.success .status-modal-text {
      color: #228b22;
    }

    .status-modal.error .status-modal-text {
      color: #8b4513;
    }
    
    .status-modal.error {
      border-color: #8b4513;
    }

    .status-modal.loading .status-modal-text {
      color: #8b5a3c;
    }

    .status-modal.confirmation {
      border-color: #8b4513;
      background: rgba(255, 255, 255, 0.98);
      box-shadow: 0 0 0 3px rgba(139, 69, 19, 0.2);
    }

    .status-modal.confirmation .status-modal-text {
      color: #8b4513;
    }

    @media (max-width: 768px) {
      .shop-items-grid {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 1rem;
      }

      .market-dialogue {
        width: 90vw;
        padding: 20px;
      }

      .shop-title {
        font-size: 24px;
      }

      .coins-display {
        font-size: 18px;
      }
    }
  </style>
<% end %>

<div class="market-container">
  <div class="market">
    <%= image_tag "market/market-bg.webp", class: "market-layer" %>
    <%= image_tag "market/merchant.webp", class: "market-layer" %>
    <%= image_tag "market/market-front.webp", class: "market-layer" %>
  </div>
</div>

<div class="market-dialogue visible" id="market-dialogue">
  <div class="market-dialogue-text">What are you looking for today?</div>
  <div class="market-dialogue-buttons">
    <button class="market-dialogue-button" onclick="openDeviceUpgrades()">Device Upgrades</button>
    <button class="market-dialogue-button" onclick="openShop()">Other Stuff</button>
  </div>
</div>

<div class="shop-interface" id="shop-interface">
  <div class="shop-header">
    <button class="shop-back-button" onclick="closeShop()">← Back</button>
    <h2 class="shop-title">Other stuff</h2>
    <div class="coins-display">
      <%= image_tag "coin.png", class: "coin-icon" %>
      <span id="user-coins">0</span>
    </div>
  </div>
  <div class="shop-items-grid" id="shop-items-grid">
    <!-- Shop items will be rendered here -->
  </div>
</div>

<div class="shop-item-modal" id="shop-item-modal">
  <div class="shop-item-modal-image-container" id="modal-item-image-container">
    <img id="modal-item-image" class="shop-item-modal-image" src="" alt="">
  </div>
  <div id="modal-item-title" class="shop-item-modal-title"></div>
  <div id="modal-item-description" class="shop-item-modal-description"></div>
  <div id="modal-item-price" class="shop-item-modal-price"></div>
  <div id="modal-item-stock" class="shop-item-modal-stock"></div>
  <div class="shop-modal-actions">
    <button class="shop-button" id="modal-buy-button" onclick="confirmPurchase()">Buy</button>
    <button class="shop-button" onclick="closeItemModal()">Cancel</button>
  </div>
</div>

<div class="tech-tree-interface" id="tech-tree-interface">
  <div class="tech-tree-header">
    <button class="shop-back-button" onclick="closeTechTree()">← Back</button>
    <button class="shop-back-button" id="switch-device-btn" onclick="switchViewedDevice()" style="display: none; margin-left: 0.5rem;">Switch to <span id="switch-device-text">Tablet</span></button>
    <h2 class="tech-tree-title">Device Upgrades</h2>
    <div class="tech-tree-controls">
      <div class="coins-display">
        <%= image_tag "coin.png", class: "coin-icon" %>
        <span id="tech-tree-coins">0</span>
      </div>
    </div>
  </div>
  <div class="tech-tree-viewport" id="tech-tree-viewport">
    <div class="tech-tree-container" id="tech-tree-container">
      <svg class="tech-tree-edges" id="tech-tree-edges"></svg>
      <div class="tech-tree-nodes" id="tech-tree-nodes"></div>
    </div>
    <div class="initial-selection-modal" id="initial-selection-modal">
      <div class="initial-selection-title" id="initial-selection-title"></div>
      <div class="initial-options" id="initial-options"></div>
    </div>
    <div class="zoom-controls">
      <button class="zoom-btn" onclick="zoomIn()">+</button>
      <button class="zoom-btn" onclick="zoomOut()">−</button>
      <button class="zoom-btn" onclick="resetZoom()" title="Reset">⟲</button>
    </div>
  </div>
</div>

<div class="tech-node-modal" id="tech-node-modal">
  <div id="tech-node-modal-title" class="tech-node-modal-title"></div>
  <div id="tech-node-modal-status" class="tech-node-modal-status"></div>
  <div id="tech-node-modal-description" class="tech-node-modal-description"></div>
  <div id="tech-node-modal-price" class="tech-node-modal-price"></div>
  <div id="tech-node-modal-info" class="tech-node-modal-info"></div>
  <div class="shop-modal-actions">
    <button class="shop-button" id="tech-node-buy-button" onclick="confirmTechNodePurchase()">Buy</button>
    <button class="shop-button" onclick="closeTechNodeModal()">Cancel</button>
  </div>
</div>

<div class="status-modal" id="status-modal">
  <div class="status-modal-text" id="status-modal-text"></div>
  <button class="shop-button" id="status-modal-button" onclick="closeStatusModal()">OK</button>
</div>

<script>
(function() {
  if (window.marketPageInitialized) {
    return;
  }
  window.marketPageInitialized = true;

  // State management
  let userCoins = 0;
  let mercenaryPrice = 35;
  let mercenaryCount = 0;
  let timeTravellingMercenaryQuantity = 0;
  let timeTravellingMercenaryInventory = 0;
  let currentItem = null;
  let userInSupportedRegion = <%= @user_in_supported_region ? 'true' : 'false' %>;

  const allShopItems = {
    other: [
      { id: 1, title: "Mercenary", price: 35, description: "This meeple will fight for you for an hour. Purchase to skip a required hour of sieging!", image: '<%= asset_path("meeple/mercenary.png") %>', maxPerWeek: 10, priceIncreases: true, oneTime: false },
      { id: 1.5, title: "Time travelling mercenary", price: 40, description: "This mercenary will go back in time to fight your past battles. It will help get you back in the siege if you failed previously. Contact @Olive after buying to have its effects applied. NOTE: buying time travelling mercenaries may cause you to lose coins and/or have shop items forcably refunded! Make sure you're aware of the dangers of time travel...", image: '<%= asset_path("meeple/time-kneeple.png") %>', limitedQuantity: true, dynamicQuantity: true, oneTime: false },
      { id: 2, title: "Unlock Orange Meeple", price: 50, description: "Not feeling your color? Try orange!", image: '<%= asset_path("meeple/meeple-orange.png") %>', oneTime: true }
      <% @purchasable_cosmetics.each_with_index do |cosmetic, index| %>
      ,{ id: <%= 100 + index %>, title: "<%= cosmetic.name %>", price: <%= cosmetic.cost %>, description: "<%= (cosmetic.description.present? ? cosmetic.description : 'A cosmetic item for your meeple!').html_safe %>", image: "<%= cosmetic.image.attached? ? rails_blob_path(cosmetic.image, only_path: false) : asset_path('meeple/meeple-red.png') %>", oneTime: true, isCosmetic: true }
      <% end %>
      <% @purchasable_physical_items.each_with_index do |physical_item, index| %>
      ,{ id: <%= 200 + index %>, title: "<%= physical_item.name %>", price: <%= physical_item.cost %>, description: "<%= (physical_item.description.present? ? physical_item.description : 'A physical item that will be shipped to you!').html_safe %>", image: "<%= physical_item.image.attached? ? rails_blob_path(physical_item.image, only_path: false) : asset_path('meeple/meeple-red.png') %>", oneTime: false, isPhysicalItem: true, digital: <%= physical_item.digital %> }
      <% end %>
    ]
  };

  const purchasedOneTimeItems = <%= raw @purchased_one_time_items.to_json %>;
  let shopItems = {};

  function getShopItemDisplayPrice(item) {
    if (item.title === 'Mercenary') {
      return mercenaryPrice;
    }
    return item.price;
  }

  function filterShopItems() {
    shopItems = {};
    Object.keys(allShopItems).forEach(category => {
      shopItems[category] = allShopItems[category].filter(item => {
        if (item.title === 'Time travelling mercenary') {
          if (timeTravellingMercenaryQuantity <= 0) {
            return false;
          }
        }
        return !item.oneTime || !purchasedOneTimeItems.includes(item.title);
      });
    });
  }

  function loadUserCoins() {
    fetch('/market/user_coins', {
      method: 'GET',
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      userCoins = data.coins;
      document.getElementById('user-coins').textContent = userCoins;
    })
    .catch(error => console.error('Failed to load user coins:', error));
  }

  function loadMercenaryPrice() {
    fetch('/market/mercenary_price', {
      method: 'GET',
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      mercenaryPrice = data.price || 35;
      mercenaryCount = data.count || 0;
      renderShopItems();
    })
    .catch(error => {
      console.warn('Failed to load mercenary price:', error);
      mercenaryPrice = 35;
      mercenaryCount = 0;
    });
  }

  function loadTimeTravellingMercenaryData() {
    fetch('/market/time_travelling_mercenary_data', {
      method: 'GET',
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      timeTravellingMercenaryQuantity = data.quantity || 0;
      timeTravellingMercenaryInventory = data.inventory_count || 0;
      filterShopItems();
      renderShopItems();
    })
    .catch(error => console.warn('Failed to load time travelling mercenary data:', error));
  }

  window.openDeviceUpgrades = function() {
    document.getElementById('market-dialogue').classList.remove('visible');
    showStatus('error', 'Device upgrades coming soon!');
  };

  window.openShop = function() {
    document.getElementById('market-dialogue').classList.remove('visible');
    document.getElementById('shop-interface').classList.add('visible');
    renderShopItems();
  };

  window.closeShop = function() {
    document.getElementById('shop-interface').classList.remove('visible');
    document.getElementById('market-dialogue').classList.add('visible');
  };

  function escapeHtml(str) {
    if (!str) return '';
    const div = document.createElement('div');
    div.textContent = str;
    return div.innerHTML;
  }

  function renderShopItems() {
    const grid = document.getElementById('shop-items-grid');
    grid.innerHTML = '';

    Object.keys(shopItems).forEach(category => {
      shopItems[category].forEach(item => {
        const card = document.createElement('div');
        card.className = 'shop-item-card';
        
        const price = getShopItemDisplayPrice(item);
        const canAfford = userCoins >= price;
        
        if (!canAfford) {
          card.classList.add('disabled');
        }

        if (item.isPhysicalItem && !item.digital && !userInSupportedRegion) {
          card.classList.add('disabled');
        }

        // Create image container
        const imageContainer = document.createElement('div');
        imageContainer.className = 'shop-item-image-container';
        
        if (item.isCosmetic) {
          const bgImg = document.createElement('img');
          bgImg.src = '<%= asset_path('meeple/meeple-cyan.png') %>';
          bgImg.className = 'shop-item-meeple-bg';
          bgImg.alt = '';
          
          const itemImg = document.createElement('img');
          itemImg.src = item.image;
          itemImg.className = 'shop-item-image cosmetic has-meeple';
          itemImg.alt = item.title;
          
          imageContainer.appendChild(bgImg);
          imageContainer.appendChild(itemImg);
        } else {
          const itemImg = document.createElement('img');
          itemImg.src = item.image;
          itemImg.className = 'shop-item-image';
          if (item.title === 'Mercenary' || item.title === 'Time travelling mercenary' || item.title === 'Unlock Orange Meeple') {
            itemImg.className += ' mercenary';
          } else if (item.isPhysicalItem) {
            itemImg.className += ' physical';
          }
          itemImg.alt = item.title;
          imageContainer.appendChild(itemImg);
        }
        
        card.appendChild(imageContainer);
        
        // Create name div
        const nameDiv = document.createElement('div');
        nameDiv.className = 'shop-item-name';
        nameDiv.textContent = item.title;
        card.appendChild(nameDiv);
        
        // Create cost div
        const costDiv = document.createElement('div');
        costDiv.className = 'shop-item-cost';
        const coinImg = document.createElement('img');
        coinImg.src = '<%= asset_path('coin.png') %>';
        coinImg.className = 'shop-item-cost-icon';
        coinImg.alt = 'coins';
        costDiv.appendChild(coinImg);
        costDiv.appendChild(document.createTextNode(' ' + price));
        card.appendChild(costDiv);
        
        // Add stock info if applicable
        if (item.maxPerWeek) {
          const stockDiv = document.createElement('div');
          stockDiv.className = 'shop-item-stock';
          stockDiv.textContent = `${mercenaryCount}/${item.maxPerWeek} this week`;
          card.appendChild(stockDiv);
        }
        
        if (item.limitedQuantity && item.title === 'Time travelling mercenary') {
          const stockDiv = document.createElement('div');
          stockDiv.className = 'shop-item-stock';
          stockDiv.textContent = `${timeTravellingMercenaryInventory}/${timeTravellingMercenaryQuantity} available`;
          card.appendChild(stockDiv);
        }

        card.onclick = () => openItemModal(item);
        grid.appendChild(card);
      });
    });
  }

  function openItemModal(item) {
    currentItem = item;
    const price = getShopItemDisplayPrice(item);
    
    const modalImageContainer = document.getElementById('modal-item-image-container');
    modalImageContainer.innerHTML = '';
    
    if (item.isCosmetic) {
      const bgImg = document.createElement('img');
      bgImg.src = '<%= asset_path('meeple/meeple-cyan.png') %>';
      bgImg.className = 'shop-item-modal-meeple-bg';
      bgImg.alt = '';
      
      const itemImg = document.createElement('img');
      itemImg.id = 'modal-item-image';
      itemImg.src = item.image;
      itemImg.className = 'shop-item-modal-image has-meeple';
      itemImg.alt = item.title;
      
      modalImageContainer.appendChild(bgImg);
      modalImageContainer.appendChild(itemImg);
    } else {
      const itemImg = document.createElement('img');
      itemImg.id = 'modal-item-image';
      itemImg.src = item.image;
      itemImg.className = 'shop-item-modal-image';
      itemImg.alt = item.title;
      
      modalImageContainer.appendChild(itemImg);
    }
    
    document.getElementById('modal-item-title').textContent = item.title;
    document.getElementById('modal-item-description').textContent = item.description;
    document.getElementById('modal-item-price').textContent = `${price} coins`;
    
    let stockText = '';
    if (item.maxPerWeek) {
      stockText = `${mercenaryCount}/${item.maxPerWeek} purchased this week`;
    } else if (item.limitedQuantity && item.title === 'Time travelling mercenary') {
      stockText = `${timeTravellingMercenaryInventory}/${timeTravellingMercenaryQuantity} available`;
    }
    document.getElementById('modal-item-stock').textContent = stockText;

    const buyButton = document.getElementById('modal-buy-button');
    const canAfford = userCoins >= price;
    const canPurchasePhysical = !item.isPhysicalItem || item.digital || userInSupportedRegion;
    
    buyButton.disabled = !canAfford || !canPurchasePhysical;
    
    const modal = document.getElementById('shop-item-modal');
    modal.classList.add('visible');
    
    // Position modal relative to active interface
    positionModalOnActiveInterface(modal);
  }

  window.closeItemModal = function() {
    document.getElementById('shop-item-modal').classList.remove('visible');
    currentItem = null;
  };

  window.confirmPurchase = function() {
    if (!currentItem) return;

    const price = getShopItemDisplayPrice(currentItem);
    
    if (userCoins < price) {
      showStatus('error', 'Not enough coins!');
      return;
    }

    showStatus('loading', 'Processing purchase...');
    
    fetch('/market/purchase', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify({
        item_name: currentItem.title,
        coins_spent: price
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showStatus('confirmation', data.message || 'Purchase successful!');
        
        userCoins -= price;
        document.getElementById('user-coins').textContent = userCoins;

        if (currentItem.oneTime) {
          purchasedOneTimeItems.push(currentItem.title);
          filterShopItems();
        }

        if (currentItem.title === 'Mercenary') {
          mercenaryCount++;
          loadMercenaryPrice();
        }

        if (currentItem.title === 'Time travelling mercenary') {
          timeTravellingMercenaryInventory++;
          if (timeTravellingMercenaryInventory >= timeTravellingMercenaryQuantity) {
            filterShopItems();
          }
        }

        closeItemModal();
        renderShopItems();
      } else {
        showStatus('error', data.error || 'Purchase failed!');
      }
    })
    .catch(error => {
      console.error('Purchase error:', error);
      showStatus('error', 'Purchase failed. Please try again.');
    });
  };

  function showStatus(type, message) {
    const modal = document.getElementById('status-modal');
    const text = document.getElementById('status-modal-text');
    const button = document.getElementById('status-modal-button');
    
    text.textContent = message;
    modal.className = `status-modal visible ${type}`;
    
    if (type === 'loading') {
      button.style.display = 'none';
    } else {
      button.style.display = 'inline-block';
      button.textContent = 'OK';
      
      // Reset button to just close the modal
      const newButton = button.cloneNode(true);
      button.parentNode.replaceChild(newButton, button);
      newButton.onclick = closeStatusModal;
    }
    
    // Position modal relative to active interface
    positionModalOnActiveInterface(modal);
  }
  
  function positionModalOnActiveInterface(modal) {
    const techTreeInterface = document.getElementById('tech-tree-interface');
    const shopInterface = document.getElementById('shop-interface');
    
    let container = null;
    if (techTreeInterface && techTreeInterface.classList.contains('visible')) {
      container = techTreeInterface;
    } else if (shopInterface && shopInterface.classList.contains('visible')) {
      container = shopInterface;
    }
    
    if (container) {
      const rect = container.getBoundingClientRect();
      modal.style.position = 'fixed';
      modal.style.left = `${rect.left + rect.width / 2}px`;
      modal.style.top = `${rect.top + rect.height / 2}px`;
      modal.style.transform = 'translate(-50%, -50%)';
    } else {
      // Fallback to center of screen
      modal.style.position = 'fixed';
      modal.style.left = '50%';
      modal.style.top = '50%';
      modal.style.transform = 'translate(-50%, -50%)';
    }
  }

  window.closeStatusModal = function() {
    document.getElementById('status-modal').classList.remove('visible');
  };

  // Tech Tree State
  let techTreeData = null;
  let viewingDeviceType = null; // "laptop" or "tablet" - which tab we're viewing
  let userMainDeviceBranchId = null; // e.g., "framework_12", "ipad_air_11" - saved on server
  let currentBranchId = null; // Currently displayed branch within the viewing device
  let techTreePurchases = {};
  let techTreeZoom = 1;
  let techTreePan = { x: 0, y: 0 };
  let isPanning = false;
  let panStart = { x: 0, y: 0 };
  let currentTechNode = null;
  const BASE_DISTANCE = 200;
  
  const DIRECTION_MULTIPLIERS = {
    'left': [-1.5, 0],
    'left1': [-1.5, -1],
    'left2': [-1.5, -2],
    'left3': [-1.5, -3],
    'left-1': [-1.5, 1],
    'left-2': [-1.5, 2],
    'right': [1.5, 0],
    'right1': [1.5, -1],
    'right2': [1.5, -2],
    'right3': [1.5, -3],
    'right-1': [1.5, 1],
    'right-2': [1.5, 2],
    'rightright1': [3, -1],
    'rightright2': [3, -2],
    'leftleft1': [-3, -1],
    'up': [0, -1.5],
    'up2': [0, -3],
    'up3': [0, -4.5],
    'up4': [0, -6],
    'up5': [0, -7.5],
    'down': [0, 1.5],
    'down2': [0, 3],
    'down3': [0, 4.5]
  };

  window.openDeviceUpgrades = function() {
    document.getElementById('market-dialogue').classList.remove('visible');
    document.getElementById('tech-tree-interface').classList.add('visible');
    
    updateTechTreeCoins();
    
    if (!techTreeData || userMainDeviceBranchId === null) {
      showStatus('loading', 'Loading tech tree data...');
      const checkInterval = setInterval(() => {
        if (techTreeData && userMainDeviceBranchId !== null) {
          clearInterval(checkInterval);
          closeStatusModal();
          initializeTechTree();
        }
      }, 100);
      return;
    }
    
    initializeTechTree();
  };

  function initializeTechTree() {
    console.log('Initializing tech tree. userMainDeviceBranchId:', userMainDeviceBranchId);
    
    if (userMainDeviceBranchId) {
      // User has a saved device, load it
      viewingDeviceType = findDeviceTypeForBranch(userMainDeviceBranchId);
      currentBranchId = userMainDeviceBranchId;
      console.log('Loading saved device:', viewingDeviceType, currentBranchId);
    } else {
      // No saved device, show device type selection
      showInitialDeviceSelection();
      return;
    }
    
    updateSwitchButton();
    renderTechTree();
  }

  function findDeviceTypeForBranch(branchId) {
    if (!techTreeData) return null;
    
    for (const [deviceType, deviceData] of Object.entries(techTreeData)) {
      if (deviceData.branches && deviceData.branches[branchId]) {
        return deviceType;
      }
    }
    return null;
  }

  window.closeTechTree = function() {
    document.getElementById('tech-tree-interface').classList.remove('visible');
    document.getElementById('market-dialogue').classList.add('visible');
  };

  function showInitialDeviceSelection() {
    const modal = document.getElementById('initial-selection-modal');
    const title = document.getElementById('initial-selection-title');
    const optionsContainer = document.getElementById('initial-options');
    
    title.textContent = 'Choose your device type';
    optionsContainer.innerHTML = '';
    
    const devices = [
      { id: 'laptop', title: 'Laptop', description: 'Get a framework' },
      { id: 'tablet', title: 'Tablet', description: 'Apple, Samsung, or OnePlus!' }
    ];
    
    devices.forEach(device => {
      const btn = document.createElement('button');
      btn.className = 'initial-option-btn';
      btn.onclick = () => selectDeviceType(device.id);
      btn.innerHTML = `
        <div class="initial-option-title">${device.title}</div>
        <div class="initial-option-desc">${device.description}</div>
      `;
      optionsContainer.appendChild(btn);
    });
    
    modal.classList.add('visible');
  }

  function selectDeviceType(deviceType) {
    document.getElementById('initial-selection-modal').classList.remove('visible');
    currentDevice = deviceType;
    selectedBranch = null;
    updateSwitchButton();
    renderTechTree();
  }

  function loadUserPurchases() {
    return fetch('/market/user_purchases', {
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      techTreePurchases = {};
      data.purchases.forEach(p => {
        techTreePurchases[p.item_name] = p.quantity;
      });
    })
    .catch(error => console.error('Failed to load purchases:', error));
  }

  function updateTechTreeCoins() {
    return fetch('/market/user_coins', {
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      userCoins = data.coins;
      document.getElementById('tech-tree-coins').textContent = userCoins;
    });
  }

  function updateSwitchButton() {
    const switchBtn = document.getElementById('switch-device-btn');
    const switchText = document.getElementById('switch-device-text');
    
    if (viewingDeviceType) {
      switchBtn.style.display = 'inline-block';
      switchText.textContent = viewingDeviceType === 'laptop' ? 'Tablet' : 'Laptop';
    } else {
      switchBtn.style.display = 'none';
    }
  }

  window.switchViewedDevice = function() {
    viewingDeviceType = viewingDeviceType === 'laptop' ? 'tablet' : 'laptop';
    
    // If switching to the device type that contains our saved device, restore it
    const userDeviceType = userMainDeviceBranchId ? findDeviceTypeForBranch(userMainDeviceBranchId) : null;
    
    if (viewingDeviceType === userDeviceType) {
      currentBranchId = userMainDeviceBranchId;
    } else {
      currentBranchId = null;
    }
    
    updateSwitchButton();
    renderTechTree();
  };

  function getNodePosition(direction) {
    const multiplier = DIRECTION_MULTIPLIERS[direction];
    if (!multiplier) {
      console.warn('Unknown direction:', direction);
      return { x: 0, y: 0 };
    }
    
    return {
      x: multiplier[0] * BASE_DISTANCE,
      y: multiplier[1] * BASE_DISTANCE
    };
  }

  function hasDeviceSpecificUpgrades() {
    if (!userMainDeviceBranchId || !techTreeData) return false;
    
    const deviceType = findDeviceTypeForBranch(userMainDeviceBranchId);
    if (!deviceType) return false;
    
    const deviceData = techTreeData[deviceType];
    if (!deviceData || !deviceData.branches || !deviceData.branches[userMainDeviceBranchId]) return false;
    
    const branches = deviceData.branches[userMainDeviceBranchId];
    
    for (const [direction, nodeData] of Object.entries(branches)) {
      if (techTreePurchases[nodeData.title] > 0) {
        return true;
      }
    }
    
    return false;
  }

  function showRootOptions(options) {
    const modal = document.getElementById('initial-selection-modal');
    const title = document.getElementById('initial-selection-title');
    const optionsContainer = document.getElementById('initial-options');
    
    title.textContent = 'Choose your configuration';
    optionsContainer.innerHTML = '';
    
    const userDeviceType = userMainDeviceBranchId ? findDeviceTypeForBranch(userMainDeviceBranchId) : null;
    const hasPurchases = hasDeviceSpecificUpgrades();
    
    options.forEach(option => {
      const btn = document.createElement('button');
      btn.className = 'initial-option-btn';
      const isCurrentlySaved = option.id === userMainDeviceBranchId;
      
      btn.onclick = () => selectBranchOption(option.id, isCurrentlySaved, hasPurchases);
      
      btn.innerHTML = `
        <div class="initial-option-title">${option.title}${isCurrentlySaved ? ' (Current)' : ''}</div>
        <div class="initial-option-desc">${option.description}</div>
      `;
      optionsContainer.appendChild(btn);
    });
    
    modal.classList.add('visible');
  }

  function selectBranchOption(branchId, isCurrentlySaved, hasPurchases) {
    console.log('selectBranchOption:', branchId, 'currently saved:', isCurrentlySaved);
    
    // If clicking the already-saved device, just close modal
    if (isCurrentlySaved) {
      document.getElementById('initial-selection-modal').classList.remove('visible');
      return;
    }
    
    // Check if user has device-specific purchases
    console.log('Switching device with purchases:', { hasPurchases, from: userMainDeviceBranchId, to: branchId });
    
    if (hasPurchases) {
      showConfirmationModal(
        'Switching device will refund all tech tree purchases. Continue?',
        () => {
          saveMainDevice(branchId, true);
        }
      );
    } else {
      saveMainDevice(branchId, false);
    }
  }

  function showConfirmationModal(message, onConfirm) {
    const modal = document.getElementById('status-modal');
    const text = document.getElementById('status-modal-text');
    const button = document.getElementById('status-modal-button');
    
    text.textContent = message;
    modal.className = 'status-modal visible confirmation';
    button.style.display = 'inline-block';
    button.textContent = 'Continue';
    
    // Position modal relative to active interface
    positionModalOnActiveInterface(modal);
    
    // Remove old event listeners by cloning the button
    const newButton = button.cloneNode(true);
    button.parentNode.replaceChild(newButton, button);
    
    newButton.onclick = () => {
      closeStatusModal();
      onConfirm();
    };
  }

  function saveMainDevice(branchId, shouldRefund) {
    console.log('Saving main device:', branchId, 'with refund:', shouldRefund);
    
    showStatus('loading', shouldRefund ? 'Refunding purchases and switching device...' : 'Switching device...');
    
    fetch('/market/set_main_device', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify({ device_id: branchId, refund: shouldRefund })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        console.log('Main device saved successfully');
        // Update our local state
        userMainDeviceBranchId = branchId;
        currentBranchId = branchId;
        viewingDeviceType = findDeviceTypeForBranch(branchId);
        
        document.getElementById('initial-selection-modal').classList.remove('visible');
        closeStatusModal();
        
        // Reload purchases and coins, then render
        Promise.all([
          loadUserPurchases(),
          updateTechTreeCoins()
        ]).then(() => {
          updateSwitchButton();
          renderTechTree();
          
          if (shouldRefund) {
            showStatus('confirmation', 'Device switched and purchases refunded!');
          }
        });
      } else {
        showStatus('error', data.error || 'Failed to update device');
      }
    })
    .catch(error => {
      console.error('Save main device error:', error);
      showStatus('error', 'Failed to update device');
    });
  }

  function renderTechTree() {
    if (!viewingDeviceType || !techTreeData) return;
    
    const deviceData = techTreeData[viewingDeviceType];
    const nodesContainer = document.getElementById('tech-tree-nodes');
    const edgesContainer = document.getElementById('tech-tree-edges');
    
    nodesContainer.innerHTML = '';
    edgesContainer.innerHTML = '';
    
    // Render root node
    const rootNode = deviceData.initialNode;
    const rootEl = document.createElement('div');
    rootEl.className = 'tech-node root-node';
    rootEl.style.left = '0px';
    rootEl.style.top = '0px';
    
    if (rootNode.options && rootNode.options.length > 0) {
      // Check if a branch is selected
      if (currentBranchId) {
        // Show selected option
        const selectedOption = rootNode.options.find(opt => opt.id === currentBranchId);
        if (selectedOption) {
          rootEl.innerHTML = `
            <div class="tech-node-title">${selectedOption.title}</div>
            <div style="font-size: 0.75rem; margin-top: 0.5rem; color: #8b5a3c;">Click to swap</div>
          `;
        } else {
          rootEl.innerHTML = `<div class="tech-node-title">${rootNode.title}</div>`;
        }
      } else {
        // Show as selection node
        const optionsHtml = rootNode.options.map(opt => 
          `<div><strong>${opt.title}</strong></div>`
        ).join('');
        
        rootEl.innerHTML = `
          <div class="tech-node-title">${rootNode.title}</div>
          <div style="font-size: 0.85rem; margin-top: 0.5rem;">${optionsHtml}</div>
          <div style="font-size: 0.75rem; margin-top: 0.5rem; color: #8b5a3c;">Click to select</div>
        `;
      }
      
      rootEl.onclick = () => showRootOptions(rootNode.options);
    } else {
      rootEl.innerHTML = `<div class="tech-node-title">${rootNode.title}</div>`;
    }
    
    nodesContainer.appendChild(rootEl);
    
    // If no branch selected, don't show other nodes
    if (!currentBranchId) {
      if (rootNode.options && rootNode.options.length > 0) {
        // Don't render branches yet
        return;
      }
    }
    
    const branches = currentBranchId ? deviceData.branches[currentBranchId] : {};
    if (!branches) return;
    
    const nodes = [];
    const edges = [];
    
    // Process all nodes
    Object.entries(branches).forEach(([direction, nodeData]) => {
      const pos = getNodePosition(direction);
      
      nodes.push({
        ...nodeData,
        x: pos.x,
        y: pos.y,
        direction
      });
      
      // Create edges from prerequisites
      if (nodeData.requires) {
        const reqTitles = nodeData.requires.split(',').map(s => s.trim());
        reqTitles.forEach(reqTitle => {
          const reqNode = nodes.find(n => n.title === reqTitle);
          if (reqNode) {
            edges.push({
              from: reqNode,
              to: nodeData,
              fromX: reqNode.x,
              fromY: reqNode.y,
              toX: pos.x,
              toY: pos.y
            });
          }
        });
      } else {
        // Connect to center (root node)
        edges.push({
          from: null,
          to: nodeData,
          fromX: 0,
          fromY: 0,
          toX: pos.x,
          toY: pos.y
        });
      }
    });
    
    // Render nodes
    nodes.forEach(node => {
      const nodeEl = document.createElement('div');
      nodeEl.className = 'tech-node';
      nodeEl.style.left = `${node.x}px`;
      nodeEl.style.top = `${node.y}px`;
      nodeEl.setAttribute('data-node-id', node.id);
      
      const purchased = techTreePurchases[node.title] || 0;
      const maxPurchases = calculateMaxPurchases(node);
      const isLocked = !isNodeAvailable(node, nodes);
      const isMaxed = maxPurchases !== Infinity && purchased >= maxPurchases;
      const isAffordable = userCoins >= node.price;
      
      if (isLocked) nodeEl.classList.add('locked');
      if (purchased > 0) nodeEl.classList.add('owned');
      if (isMaxed) nodeEl.classList.add('maxed');
      if (!isAffordable && !isLocked) nodeEl.classList.add('unaffordable');
      
      let counterText = '';
      if (maxPurchases === Infinity) {
        if (purchased > 0) counterText = `<div class="tech-node-counter">Owned: ${purchased}</div>`;
      } else if (maxPurchases > 1 || node.dynamicMaxPurchases) {
        counterText = `<div class="tech-node-counter">${purchased}/${maxPurchases}</div>`;
      }
      
      nodeEl.innerHTML = `
        <div class="tech-node-title">${node.title}</div>
        <div class="tech-node-price">
          <img src="<%= asset_path('coin.png') %>" class="tech-node-price-icon" alt="coins">
          ${node.price}
        </div>
        ${counterText}
      `;
      
      nodeEl.onclick = () => openTechNodeModal(node, isLocked, isMaxed, isAffordable, purchased, maxPurchases);
      
      nodesContainer.appendChild(nodeEl);
    });
    
    // Render edges with proper SVG sizing
    if (edges.length > 0) {
      // Calculate bounds
      let minX = 0, maxX = 0, minY = 0, maxY = 0;
      nodes.forEach(node => {
        minX = Math.min(minX, node.x);
        maxX = Math.max(maxX, node.x);
        minY = Math.min(minY, node.y);
        maxY = Math.max(maxY, node.y);
      });
      
      const padding = 400;
      const width = maxX - minX + padding * 2;
      const height = maxY - minY + padding * 2;
      const offsetX = -minX + padding;
      const offsetY = -minY + padding;
      
      edgesContainer.setAttribute('width', width);
      edgesContainer.setAttribute('height', height);
      edgesContainer.style.marginLeft = `${minX - padding}px`;
      edgesContainer.style.marginTop = `${minY - padding}px`;
      
      edges.forEach(edge => {
        // Calculate edge connection points on circle perimeters
        const fromRadius = edge.fromX === 0 && edge.fromY === 0 ? 90 : 70; // root node is larger
        const toRadius = 70;
        
        const dx = edge.toX - edge.fromX;
        const dy = edge.toY - edge.fromY;
        const angle = Math.atan2(dy, dx);
        
        // Calculate start point (from circle edge)
        const x1 = edge.fromX + Math.cos(angle) * fromRadius;
        const y1 = edge.fromY + Math.sin(angle) * fromRadius;
        
        // Calculate end point (to circle edge, from opposite side)
        const x2 = edge.toX - Math.cos(angle) * toRadius;
        const y2 = edge.toY - Math.sin(angle) * toRadius;
        
        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        line.setAttribute('x1', x1 + offsetX);
        line.setAttribute('y1', y1 + offsetY);
        line.setAttribute('x2', x2 + offsetX);
        line.setAttribute('y2', y2 + offsetY);
        line.setAttribute('class', 'tech-edge');
        
        const toNode = edge.to;
        const purchased = techTreePurchases[toNode.title] || 0;
        const isLocked = !isNodeAvailable(toNode, nodes);
        
        if (isLocked) line.classList.add('locked');
        if (purchased > 0) line.classList.add('owned');
        
        edgesContainer.appendChild(line);
      });
    }
  }

  function isNodeAvailable(node, allNodes) {
    if (!node.requires) return true;
    
    const reqTitles = node.requires.split(',').map(s => s.trim());
    return reqTitles.every(reqTitle => {
      return (techTreePurchases[reqTitle] || 0) > 0;
    });
  }

  function calculateMaxPurchases(node) {
    if (node.dynamicMaxPurchases) {
      const match = node.dynamicMaxPurchases.match(/^(.+)\s*\+\s*(\d+)$/);
      if (match) {
        const baseTitle = match[1].trim();
        const additional = parseInt(match[2], 10);
        const basePurchased = techTreePurchases[baseTitle] || 0;
        return basePurchased + additional;
      }
    }
    
    if (node.maxPurchases === null || node.maxPurchases === undefined) {
      return 1; // Default to 1 purchase max
    }
    
    return node.maxPurchases;
  }

  function openTechNodeModal(node, isLocked, isMaxed, isAffordable, purchased, maxPurchases) {
    currentTechNode = node;
    
    document.getElementById('tech-node-modal-title').textContent = node.title;
    document.getElementById('tech-node-modal-description').textContent = node.description || '';
    
    const priceEl = document.getElementById('tech-node-modal-price');
    priceEl.innerHTML = `
      <img src="<%= asset_path('coin.png') %>" class="tech-node-modal-price-icon" alt="coins">
      ${node.price}
    `;
    
    const statusEl = document.getElementById('tech-node-modal-status');
    statusEl.style.display = 'none';
    statusEl.className = 'tech-node-modal-status';
    
    if (isLocked) {
      statusEl.style.display = 'block';
      statusEl.classList.add('locked');
      statusEl.textContent = 'Locked - Purchase prerequisites first';
    }
    
    const infoEl = document.getElementById('tech-node-modal-info');
    let infoText = '';
    
    if (maxPurchases === Infinity) {
      if (purchased > 0) infoText = `Owned: ${purchased}`;
    } else if (maxPurchases > 1) {
      infoText = `Purchased: ${purchased}/${maxPurchases}`;
    } else if (purchased > 0) {
      infoText = 'Already owned';
    }
    
    if (node.requires) {
      const prereqs = node.requires.split(',').map(s => s.trim()).join(', ');
      if (infoText) infoText += '<br>';
      infoText += `Requires: ${prereqs}`;
    }
    
    infoEl.innerHTML = infoText;
    
    const buyButton = document.getElementById('tech-node-buy-button');
    buyButton.disabled = isLocked || isMaxed || !isAffordable;
    
    if (!isAffordable && !isLocked && !isMaxed) {
      buyButton.textContent = 'Not enough coins';
    } else if (isMaxed) {
      buyButton.textContent = 'Maxed';
    } else {
      buyButton.textContent = 'Buy';
    }
    
    const modal = document.getElementById('tech-node-modal');
    modal.classList.add('visible');
    
    // Position modal relative to active interface
    positionModalOnActiveInterface(modal);
  }

  window.closeTechNodeModal = function() {
    document.getElementById('tech-node-modal').classList.remove('visible');
    currentTechNode = null;
  };

  window.confirmTechNodePurchase = function() {
    if (!currentTechNode) return;
    purchaseTechNode(currentTechNode);
  };

  function purchaseTechNode(node) {
    if (userCoins < node.price) {
      showStatus('error', 'Not enough coins!');
      return;
    }
    
    const purchased = techTreePurchases[node.title] || 0;
    const maxPurchases = calculateMaxPurchases(node);
    
    if (maxPurchases !== Infinity && purchased >= maxPurchases) {
      showStatus('error', 'Already purchased maximum!');
      return;
    }
    
    // Show loading state
    showStatus('loading', 'Processing purchase...');
    
    fetch('/market/purchase', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify({
        item_name: node.title,
        coins_spent: node.price
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showStatus('confirmation', data.message || 'Purchase successful!');
        userCoins -= node.price;
        techTreePurchases[node.title] = (techTreePurchases[node.title] || 0) + 1;
        updateTechTreeCoins();
        closeTechNodeModal();
        renderTechTree();
      } else {
        showStatus('error', data.error || 'Purchase failed!');
      }
    })
    .catch(error => {
      console.error('Purchase error:', error);
      showStatus('error', 'Purchase failed. Please try again.');
    });
  }

  // Zoom and pan controls
  window.zoomIn = function() {
    techTreeZoom = Math.min(techTreeZoom * 1.2, 3);
    applyTransform();
  };

  window.zoomOut = function() {
    techTreeZoom = Math.max(techTreeZoom / 1.2, 0.3);
    applyTransform();
  };

  window.resetZoom = function() {
    techTreeZoom = 1;
    techTreePan = { x: 0, y: 0 };
    applyTransform();
  };

  function applyTransform() {
    const container = document.getElementById('tech-tree-container');
    container.style.transform = `translate(${techTreePan.x}px, ${techTreePan.y}px) scale(${techTreeZoom})`;
  }

  // Pan functionality
  const viewport = document.getElementById('tech-tree-viewport');
  
  viewport.addEventListener('mousedown', (e) => {
    if (e.target === viewport || e.target.closest('.tech-tree-container')) {
      e.preventDefault();
      isPanning = true;
      panStart = { x: e.clientX - techTreePan.x, y: e.clientY - techTreePan.y };
      viewport.style.cursor = 'grabbing';
    }
  });

  viewport.addEventListener('mousemove', (e) => {
    if (isPanning) {
      techTreePan.x = e.clientX - panStart.x;
      techTreePan.y = e.clientY - panStart.y;
      applyTransform();
    }
  });

  viewport.addEventListener('mouseup', () => {
    isPanning = false;
    viewport.style.cursor = 'default';
  });

  viewport.addEventListener('mouseleave', () => {
    isPanning = false;
    viewport.style.cursor = 'default';
  });

  // Wheel zoom
  viewport.addEventListener('wheel', (e) => {
    if (e.ctrlKey) {
      e.preventDefault();
      const delta = e.deltaY > 0 ? 0.9 : 1.1;
      techTreeZoom = Math.max(0.3, Math.min(3, techTreeZoom * delta));
      applyTransform();
    }
  });

  // Initialize everything on page load
  filterShopItems();
  loadUserCoins();
  loadMercenaryPrice();
  loadTimeTravellingMercenaryData();
  
  // Preload tech tree data
  fetch('/market/tech_tree_data', {
    headers: {
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    }
  })
  .then(r => r.json())
  .then(data => {
    techTreeData = data;
    console.log('Tech tree data loaded');
  })
  .catch(error => console.error('Failed to preload tech tree:', error));
  
  fetch('/market/user_purchases', {
    headers: {
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    }
  })
  .then(r => r.json())
  .then(data => {
    techTreePurchases = {};
    data.purchases.forEach(p => {
      techTreePurchases[p.item_name] = p.quantity;
    });
    console.log('Purchases loaded:', techTreePurchases);
  })
  .catch(error => console.error('Failed to preload purchases:', error));
  
  fetch('/market/get_main_device', {
    headers: {
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    }
  })
  .then(r => r.json())
  .then(data => {
    userMainDeviceBranchId = data.main_device || null;
    console.log('Main device loaded from server:', userMainDeviceBranchId);
  })
  .catch(error => console.error('Failed to preload main device:', error));
})();
</script>
