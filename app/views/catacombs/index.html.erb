<% content_for :body_class, "catacombs-page" %>

<% content_for :head do %>
  <style>
    html, body {
      overflow: hidden;
    }
    
    .catacombs-page .navbar-nav > :not(:first-child) {
      display: none;
    }
    
    .catacombs-container {
      width: 100vw;
      background: transparent;
      overflow: hidden;
    }
    
    .catacombs {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 100vw;
      height: 100vh;
    }
    
    .catacombs-layer {
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      object-fit: cover;
      transition: filter 0.3s ease;
    }

    .catacombs-layer:nth-child(1) { z-index: 1; }
    .catacombs-layer:nth-child(2) { z-index: 2; }
    .catacombs-layer:nth-child(3) { z-index: 3; }

    .catacombs-layer.highlighted {
      filter: drop-shadow(4px 0 0 rgba(191, 177, 131, 0.8)) drop-shadow(-4px 0 0 rgba(191, 177, 131, 0.8)) drop-shadow(0 4px 0 rgba(191, 177, 131, 0.8)) drop-shadow(0 -4px 0 rgba(245, 231, 183, 0.8));
    }

    .hover-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      pointer-events: none;
      z-index: 300;
    }
    
    .hover-box {
      position: absolute;
      pointer-events: none;
    }
    
    .hover-box svg {
      width: 100%;
      height: 100%;
      pointer-events: auto;
    }
    
    .hover-box svg path,
    .hover-box svg circle,
    .hover-box svg rect,
    .hover-box svg polygon {
      cursor: pointer;
      transition: opacity 0.2s ease;
    }
    
    .hover-box svg path:hover,
    .hover-box svg circle:hover,
    .hover-box svg rect:hover,
    .hover-box svg polygon:hover {
      opacity: 0.8;
    }

    .mystereeple-dialogue {
      position: fixed;
      top: 35%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 600px;
      padding: 40px;
      background: rgba(171, 171, 171, 0.95);
      border: 3px solid #402b20;
      z-index: 1000;
      display: none;
    }

    .mystereeple-dialogue.visible {
      display: block;
    }

    .mystereeple-dialogue-text {
      font-family: "IM Fell English", serif;
      font-size: 20px;
      color: #402b20;
      text-align: center;
      margin-bottom: 30px;
      line-height: 1.5;
    }

    .mystereeple-dialogue-close {
      display: block;
      margin: 0 auto;
      padding: 10px 30px;
      background: #402b20;
      color: #f5e7b7;
      border: 2px solid #402b20;
      font-family: "IM Fell English", serif;
      font-size: 18px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .mystereeple-dialogue-close:hover {
      background: #f5e7b7;
      color: #402b20;
    }


  </style>
<% end %>

<div class="catacombs-container">
  <div class="catacombs">
    <%= image_tag "catacombs/catacombs-bg.webp", class: "catacombs-layer" %>
    <%= image_tag "catacombs/catacombs-lines.webp", class: "catacombs-layer" %>
    <%= image_tag "catacombs/catacombs-mystereeple.webp", class: "catacombs-layer mystereeple" %>
  </div>
</div>
<div class="hover-overlay">
  <!-- Hover boxes will be generated by JavaScript -->
</div>

<div class="mystereeple-dialogue" id="mystereeple-dialogue">
  <div class="mystereeple-dialogue-text" id="mystereeple-text"></div>
  <button class="mystereeple-dialogue-close" onclick="closeMystereepleDialogue()">Close</button>
</div>

<script>
let typingInProgress = false;

function typeText(element, text, speed = 50) {
  return new Promise((resolve) => {
    element.textContent = '';
    let index = 0;
    typingInProgress = true;
    
    function type() {
      if (index < text.length) {
        element.textContent += text.charAt(index);
        index++;
        setTimeout(type, speed);
      } else {
        typingInProgress = false;
        resolve();
      }
    }
    
    type();
  });
}

function showMystereepleDialogue() {
  const dialogue = document.getElementById('mystereeple-dialogue');
  const textElement = document.getElementById('mystereeple-text');
  
  dialogue.classList.add('visible');
  typeText(textElement, "Check back here later, I'll have something for you in a couple days :)");
}

function closeMystereepleDialogue() {
  typingInProgress = false;
  document.getElementById('mystereeple-dialogue').classList.remove('visible');
}


// Register Catacombs Manager
(function() {
  const catacombsElement = document.querySelector('.catacombs');
  if (!catacombsElement) return; // Not on catacombs page

  class CatacombsManager {
    constructor() {
      this.originalWidth = 3392;
      this.originalHeight = 2358;
    }

    initialize() {
      console.log('Catacombs: Initializing...');
      
      try {
        this.setupClickSystem();
        
        this.isValid = true;
        return true;
      } catch (error) {
        console.error('Catacombs: Initialization failed:', error);
        return false;
      }
    }

    validate() {
      return this.isValid && 
             document.querySelector('.catacombs') &&
             document.querySelector('.hover-overlay');
    }

    setupClickSystem() {
      const hoverOverlay = document.querySelector('.hover-overlay');
      if (!hoverOverlay) return;
      
      hoverOverlay.innerHTML = ''; // Clear existing
      
      this.createHoverSVG();
      this.updateHoverSVGPosition();
      
      window.addEventListener('resize', () => {
        this.updateHoverSVGPosition();
      });
    }

    createHoverSVG() {
      const hoverOverlay = document.querySelector('.hover-overlay');
      const svgElement = document.createElement('div');
      svgElement.className = 'hover-box';
      
      const clickAreas = [
        {
          id: 'mystereeple',
          path: `M177 754H109L91 687.5L148.5 516.5L68.5 499L1 466L17.5 426.5L68.5 368.5L152 321L148.5 265.5L160.5 252V205.5L176 158.5L112.5 131.5L100.5 112.5L124.5 87L198 82L234.5 1L338.5 19.5L347.5 40L363.5 19.5L470 32L474 121.5L539.5 150.5V180.5L516 193.5L451 205.5L459 269L430.5 321L486 351L539.5 404L559 438L550 473.5L525 486L436 512.5L413.5 648.5L418.5 717.5L360 773.5L293 712L221 704L177 754Z`,
          fill: "#E40000",
          fillOpacity: "0",
          stroke: "",
          x: 2050,
          y: 1360,
          scale: 1,
          targetLayer: 'mystereeple',
          action: 'showMystereepleDialogue'
        }
      ];
      
      let svgContent = `<svg width="100%" height="100%" viewBox="0 0 ${this.originalWidth} ${this.originalHeight}" xmlns="http://www.w3.org/2000/svg">`;
      
      clickAreas.forEach(area => {
        if (!area.path) return; // Skip empty paths
        
        let transform = '';
        if (area.x !== 0 || area.y !== 0) {
          transform += `translate(${area.x}, ${area.y}) `;
        }
        if (area.scale !== 1.0) {
          transform += `scale(${area.scale}) `;
        }
        
        svgContent += `<path id="${area.id}" d="${area.path}" fill="${area.fill}" fill-opacity="${area.fillOpacity}" stroke="${area.stroke}" stroke-width="2" cursor="pointer"`;
        if (transform) {
          svgContent += ` transform="${transform.trim()}"`;
        }
        svgContent += ` />`;
      });
      
      svgContent += '</svg>';
      svgElement.innerHTML = svgContent;
      
      clickAreas.forEach(area => {
        if (!area.path) return; // Skip empty paths
        
        const pathElement = svgElement.querySelector(`#${area.id}`);
        if (pathElement) {
          const targetLayer = document.querySelector('.catacombs-layer.' + area.targetLayer);
          
          pathElement.addEventListener('mouseenter', () => {
            if (targetLayer) targetLayer.classList.add('highlighted');
            pathElement.style.opacity = '0.8';
          });
          
          pathElement.addEventListener('mouseleave', () => {
            if (targetLayer) targetLayer.classList.remove('highlighted');
            pathElement.style.opacity = '1';
          });
          
          if (area.action && window[area.action]) {
            pathElement.addEventListener('click', () => {
              window[area.action]();
            });
          }
        }
      });
      
      hoverOverlay.appendChild(svgElement);
    }

    updateHoverSVGPosition() {
      const hoverBox = document.querySelector('.hover-box');
      if (!hoverBox) return;
      
      const scaleX = window.innerWidth / this.originalWidth;
      const scaleY = window.innerHeight / this.originalHeight;
      const baseScale = Math.max(scaleX, scaleY);
      
      const scaledWidth = this.originalWidth * baseScale;
      const scaledHeight = this.originalHeight * baseScale;
      
      const catacombsOffsetX = (window.innerWidth - scaledWidth) / 2;
      const catacombsOffsetY = (window.innerHeight - scaledHeight) / 2;
      
      hoverBox.style.left = catacombsOffsetX + 'px';
      hoverBox.style.top = catacombsOffsetY + 'px';
      hoverBox.style.width = scaledWidth + 'px';
      hoverBox.style.height = scaledHeight + 'px';
    }
  }

  // Register the manager
  function registerCatacombsManager() {
    if (window.SiegeApp && typeof window.SiegeBaseManager !== 'undefined') {
      SiegeApp.registerManager('catacombs', new CatacombsManager());
    } else {
      // Wait for SiegeApp to be available
      setTimeout(registerCatacombsManager, 50);
    }
  }

  registerCatacombsManager();
})();
</script>
