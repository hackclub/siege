<style>
  .analytics-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
  }
  .analytics-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 2rem;
    color: #402b20;
    text-align: center;
  }
  .chart-section {
    background: rgba(255, 255, 255, 0.95);
    border: 2px solid rgba(64, 43, 32, 0.15);
    border-radius: 16px;
    padding: 2rem;
    margin-bottom: 2rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  }
  .chart-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: #402b20;
    margin-bottom: 1.5rem;
    text-align: center;
  }
  .chart-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    margin-top: 2rem;
  }
  @media (max-width: 768px) {
    .chart-row {
      grid-template-columns: 1fr;
    }
  }
  .chart-container {
    position: relative;
    height: 400px;
  }
  .funnel-container {
    position: relative;
    height: 400px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem 2rem 0 2rem;
  }
  .funnel-labels {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 1rem;
    margin-top: 1rem;
    padding: 0 2rem;
  }
  .funnel-label-item {
    background: rgba(255, 255, 255, 0.8);
    border: 1px solid rgba(64, 43, 32, 0.2);
    border-radius: 8px;
    padding: 0.5rem 1rem;
    text-align: center;
    min-width: 120px;
  }
  .funnel-label-value {
    font-size: 1.1rem;
    font-weight: 700;
    color: #402b20;
    margin-bottom: 0.25rem;
  }
  .funnel-label-text {
    font-size: 0.85rem;
    color: #6b5b4a;
    font-weight: 500;
  }
  .progress-container {
    position: relative;
    height: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
</style>

<div class="analytics-container">
  <h1 class="analytics-title">Analytics Dashboard</h1>

  <!-- User Funnel -->
  <div class="chart-section">
    <h2 class="chart-title">User Engagement Funnel</h2>
    <div class="funnel-container">
      <canvas id="funnelChart"></canvas>
    </div>
    <div class="funnel-labels" id="funnelLabels">
      <!-- Labels will be generated by JavaScript -->
    </div>
  </div>

  <!-- Growth Charts -->
      <div class="chart-row">
      <div class="chart-section">
        <h2 class="chart-title">Total Users Progress</h2>
        <div class="progress-container">
          <canvas id="userProgressChart"></canvas>
        </div>
      </div>

    <div class="chart-section">
      <h2 class="chart-title">Hours Spent Per Week</h2>
      <div class="chart-container">
        <canvas id="hoursPerWeekChart"></canvas>
      </div>
    </div>
  </div>

  <!-- Daily Hours Chart -->
  <div class="chart-section">
    <h2 class="chart-title">Daily Hours Coded (Last 30 Days)</h2>
    <div class="chart-container">
      <canvas id="dailyHoursChart"></canvas>
    </div>
  </div>
</div>

<% content_for :head do %>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-chart-funnel@4.2.4/build/index.umd.min.js"></script>
<% end %>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Register the funnel plugin
    Chart.register(ChartFunnel.FunnelController, ChartFunnel.TrapezoidElement);

    // Create funnel chart using Chart.js funnel plugin
    const funnelData = <%= @funnel_data.to_json.html_safe %>;

    // Build labels and data arrays including individual weeks 5-14
    const labels = [
      'Total Users',
      'Users with Address',
      'Users with Projects',
      'Users with Hackatime',
      'Users Submitted'
    ];
    const data = [
      funnelData.total_users,
      funnelData.users_with_address,
      funnelData.users_with_projects,
      funnelData.users_with_hackatime,
      funnelData.users_submitted
    ];
    const colors = [
      '#3B82F6',
      '#06B6D4', // cyan for users without address
      '#10B981',
      '#F59E0B',
      '#EF4444'
    ];
    const borderColors = [
      '#1E40AF',
      '#0891B2', // darker cyan
      '#047857',
      '#D97706',
      '#DC2626'
    ];

    // Add individual weeks 5-14 with different colors
    const weekColors = [
      '#8B5CF6', '#A855F7', '#C084FC', '#D8B4FE', // purples
      '#EC4899', '#F472B6', '#F9A8D4', '#FBCFE8', // pinks
      '#F97316', '#FB923C'  // oranges
    ];
    const weekBorderColors = [
      '#7C3AED', '#9333EA', '#A21CAF', '#C026D3',
      '#DB2777', '#E11D48', '#F43F5E', '#FB7185',
      '#EA580C', '#F97316'
    ];

    for (let week = 5; week <= 14; week++) {
      if (funnelData.users_completed_by_week[week] !== undefined) {
        const weekLabel = week === 5 ? `Week ${week} Completed (9h+ w/ mercenaries)` : `Week ${week} Completed (10h+ w/ mercenaries)`;
        labels.push(weekLabel);
        data.push(funnelData.users_completed_by_week[week]);
        colors.push(weekColors[week - 5] || '#8B5CF6');
        borderColors.push(weekBorderColors[week - 5] || '#7C3AED');
      }
    }

    new Chart(document.getElementById('funnelChart'), {
      type: 'funnel',
      data: {
        labels: labels,
        datasets: [{
          data: data,
          backgroundColor: colors,
          borderColor: borderColors,
          borderWidth: 2
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                const value = context.parsed.y;
                const total = funnelData.total_users;
                const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : '0.0';
                return `${context.label}: ${value} users (${percentage}%)`;
              }
            }
          }
        },
        scales: {
          x: {
            display: false
          },
          y: {
            display: false
          }
        },
        layout: {
          padding: {
            top: 20,
            right: 20,
            bottom: 40,
            left: 20
          }
        }
      }
    });

    // Generate labels at the bottom
    const labelsContainer = document.getElementById('funnelLabels');
    const totalUsers = funnelData.total_users;

    // Create label items for each funnel step
    labels.forEach((label, index) => {
      const value = data[index];
      const percentage = totalUsers > 0 ? ((value / totalUsers) * 100).toFixed(1) : '0.0';

      // Calculate conversion rate from previous step
      let conversionRate = '';
      if (index > 0) {
        const previousValue = data[index - 1];
        const conversionPercentage = previousValue > 0 ? ((value / previousValue) * 100).toFixed(1) : '0.0';
        conversionRate = ` | ${conversionPercentage}%`;
      }

      const labelItem = document.createElement('div');
      labelItem.className = 'funnel-label-item';
      labelItem.innerHTML = `
        <div class="funnel-label-value">${value.toLocaleString()}</div>
        <div class="funnel-label-text">${label}<br>(${percentage}%${conversionRate})</div>
      `;

      labelsContainer.appendChild(labelItem);
    });

    // User Progress Chart using Chart.js
    const userGrowthData = <%= @user_growth_data.to_json.html_safe %>;
    const currentUsers = userGrowthData.length > 0 ? userGrowthData[userGrowthData.length - 1].users : 0;
    const targetUsers = 1000;
    const progressPercentage = (currentUsers / targetUsers) * 100;

    new Chart(document.getElementById('userProgressChart'), {
      type: 'bar',
      data: {
        labels: ['Users Progress'],
        datasets: [
          {
            label: 'Current Users',
            data: [currentUsers],
            backgroundColor: '#3B82F6',
            borderColor: '#1E40AF',
            borderWidth: 2
          },
          {
            label: 'Remaining to Target',
            data: [Math.max(0, targetUsers - currentUsers)],
            backgroundColor: 'rgba(64, 43, 32, 0.1)',
            borderColor: 'rgba(64, 43, 32, 0.2)',
            borderWidth: 1
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        indexAxis: 'y',
        scales: {
          x: {
            beginAtZero: true,
            max: targetUsers,
            stacked: true,
            grid: {
              color: 'rgba(64, 43, 32, 0.1)'
            },
            ticks: {
              color: '#402b20',
              callback: function(value) {
                return value.toLocaleString();
              }
            },
            title: {
              display: true,
              text: 'Number of Users',
              color: '#402b20',
              font: {
                size: 14,
                weight: '600'
              }
            }
          },
          y: {
            display: false,
            stacked: true
          }
        },
        plugins: {
          legend: {
            display: true,
            position: 'bottom',
            labels: {
              color: '#402b20',
              font: {
                size: 12
              }
            }
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                if (context.datasetIndex === 0) {
                  return `Current Users: ${context.parsed.x.toLocaleString()} (${progressPercentage.toFixed(1)}% of target)`;
                } else {
                  return `Remaining: ${context.parsed.x.toLocaleString()} users to reach 1000`;
                }
              }
            }
          }
        },
        layout: {
          padding: 20
        }
      }
    });

    // Add center text for the progress chart
    const progressCanvas = document.getElementById('userProgressChart');
    const ctx = progressCanvas.getContext('2d');
    const centerX = progressCanvas.width / 2;
    const centerY = progressCanvas.height / 2;

    // Draw center text
    ctx.font = 'bold 24px Arial';
    ctx.fillStyle = '#402b20';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(`${currentUsers}`, centerX, centerY - 10);
    ctx.fillText(`/ ${targetUsers}`, centerX, centerY + 15);

    // Draw percentage below
    ctx.font = '16px Arial';
    ctx.fillStyle = '#6b5b4a';
    ctx.fillText(`${progressPercentage.toFixed(1)}%`, centerX, centerY + 40);

    // Hours Per Week Chart (Triple Bar)
    const hoursData = <%= @hours_per_week_data.to_json.html_safe %>;

    new Chart(document.getElementById('hoursPerWeekChart'), {
      type: 'bar',
      data: {
        labels: hoursData.map(d => `Week ${d.week}`),
        datasets: [
          {
            label: 'Total Hours',
            data: hoursData.map(d => d.total_hours),
            backgroundColor: '#10B981',
            borderColor: '#059669',
            borderWidth: 1
          },
          {
            label: 'Submitted/Pending/Finished Hours',
            data: hoursData.map(d => d.submitted_hours),
            backgroundColor: '#3B82F6',
            borderColor: '#1E40AF',
            borderWidth: 1
          },
          {
            label: 'Airtable Synced Hours',
            data: hoursData.map(d => d.airtable_synced_hours),
            backgroundColor: '#8B5CF6',
            borderColor: '#7C3AED',
            borderWidth: 1
          },
          {
            label: 'Coins Given Out (/10)',
            data: hoursData.map(d => d.total_coins),
            backgroundColor: '#F59E0B',
            borderColor: '#D97706',
            borderWidth: 1
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: true,
            position: 'top',
            labels: {
              color: '#402b20',
              font: {
                size: 12
              }
            }
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                const datasetIndex = context.datasetIndex;
                const value = context.parsed.y;
                
                switch(datasetIndex) {
                  case 0:
                    return `Total Hours: ${value} hours (all project development time)`;
                  case 1:
                    return `Submitted Hours: ${value} hours (projects beyond building status)`;
                  case 2:
                    return `Airtable Synced Hours: ${value} hours (finished projects synced to Airtable)`;
                  case 3:
                    const actualCoins = value * 10;
                    return `Coins Given Out: ${actualCoins} coins (${value} displayed, only for submitted projects)`;
                  default:
                    return `${context.dataset.label}: ${value}`;
                }
              }
            }
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: 'rgba(64, 43, 32, 0.1)'
            },
            ticks: {
              color: '#402b20',
              callback: function(value) {
                return value;
              }
            },
            title: {
              display: true,
              text: 'Hours / Coins (/10)',
              color: '#402b20',
              font: {
                size: 14,
                weight: '600'
              }
            }
          },
          x: {
            grid: {
              color: 'rgba(64, 43, 32, 0.1)'
            },
            ticks: {
              color: '#402b20'
            },
            title: {
              display: true,
              text: 'Week',
              color: '#402b20',
              font: {
                size: 14,
                weight: '600'
              }
            }
          }
        }
      }
    });

    // Daily Hours Chart
    const dailyHoursData = <%= @daily_hours_data.to_json.html_safe %>;

    new Chart(document.getElementById('dailyHoursChart'), {
      type: 'line',
      data: {
        labels: dailyHoursData.map(d => d.display_date),
        datasets: [{
          label: 'Hours Coded',
          data: dailyHoursData.map(d => d.hours),
          backgroundColor: 'rgba(16, 185, 129, 0.1)',
          borderColor: '#10B981',
          borderWidth: 2,
          fill: true,
          tension: 0.4,
          pointBackgroundColor: '#10B981',
          pointBorderColor: '#059669',
          pointBorderWidth: 2,
          pointRadius: 4,
          pointHoverRadius: 6
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                return `${context.parsed.y} hours`;
              }
            }
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: 'rgba(64, 43, 32, 0.1)'
            },
            ticks: {
              color: '#402b20',
              callback: function(value) {
                return value + 'h';
              }
            },
            title: {
              display: true,
              text: 'Hours',
              color: '#402b20',
              font: {
                size: 14,
                weight: '600'
              }
            }
          },
          x: {
            grid: {
              color: 'rgba(64, 43, 32, 0.1)'
            },
            ticks: {
              color: '#402b20',
              maxTicksLimit: 15
            },
            title: {
              display: true,
              text: 'Date',
              color: '#402b20',
              font: {
                size: 14,
                weight: '600'
              }
            }
          }
        },
        interaction: {
          intersect: false,
          mode: 'index'
        }
      }
    });
  });
</script>
