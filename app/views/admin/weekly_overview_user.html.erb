<% content_for :title, "Admin - Weekly Overview - #{@user.name}" %>

<% content_for :head do %>
  <style>
    .admin-container {
      max-width: 100%;
      margin: 0;
      <% if @is_ysws_review %>
      margin-left: 20rem; /* Account for navbar on YSWS review */
      <% end %>
      padding: 2rem;
    }

@media (max-width: 768px) {
  .admin-container {
    margin-left: auto; /* Reset to auto on mobile */
    margin-top: 12rem; /* Position content below navbar */
  }
}
    
    .back-link {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      color: #6366f1;
      text-decoration: none;
      margin-bottom: 2rem;
      font-weight: 500;
    }
    
    .back-link:hover {
      color: #4f46e5;
      text-decoration: none;
    }
    
    .page-header {
      margin-bottom: 2rem;
    }
    
    .page-title {
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 0.5rem;
      color: #402b20;
    }
    
    .page-subtitle {
      font-size: 1.1rem;
      color: #6b5b4a;
    }
    
    .content-grid {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 2rem;
      margin-bottom: 2rem;
    }
    
    @media (max-width: 768px) {
      .content-grid {
        grid-template-columns: 1fr;
      }
    }
    
    .card {
      background: rgba(255, 255, 255, 0.95);
      border: 2px solid rgba(64, 43, 32, 0.15);
      border-radius: 16px;
      padding: 1.5rem;
    }
    
    .card-title {
      font-size: 1.25rem;
      font-weight: 700;
      margin-bottom: 1rem;
      color: #402b20;
    }
    
    .user-info {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 1rem;
    }
    
    .info-item {
      display: flex;
      flex-direction: column;
    }
    
    .info-label {
      font-size: 0.9rem;
      color: #6b5b4a;
      margin-bottom: 0.25rem;
    }
    
    .info-value {
      font-weight: 600;
      color: #402b20;
    }
    
    .project-status {
      display: inline-block;
      padding: 0.25rem 0.75rem;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: 600;
      text-transform: uppercase;
    }
    
    .project-status.building { background-color: #dbeafe; color: #1e40af; }
    .project-status.submitted { background-color: #d1fae5; color: #059669; }
    .project-status.pending_voting { background-color: #fef3c7; color: #d97706; }
    .project-status.finished { background-color: #e5e7eb; color: #374151; }
    
    .fraud-status {
      display: inline-block;
      padding: 0.25rem 0.75rem;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: 600;
      text-transform: uppercase;
    }
    
    .fraud-status.unchecked { background-color: #fbbf24; color: #92400e; }
    .fraud-status.sus { background-color: #f59e0b; color: white; }
    .fraud-status.fraud { background-color: #dc2626; color: white; }
    .fraud-status.good { background-color: #059669; color: white; }
    
         .review-panel, .user-management-panel {
       background: rgba(255, 248, 220, 0.8);
       border: 2px solid rgba(217, 119, 6, 0.3);
       border-radius: 16px;
       padding: 1.5rem;
     }
     
     .user-management-panel {
       background: rgba(220, 248, 255, 0.8);
       border: 2px solid rgba(6, 119, 217, 0.3);
     }
    
    .form-group {
      margin-bottom: 1rem;
    }
    
    .form-label {
      display: block;
      font-weight: 600;
      color: #402b20;
      margin-bottom: 0.5rem;
    }
    
    .form-input, .form-textarea {
      width: 100%;
      padding: 0.75rem;
      border: 2px solid rgba(64, 43, 32, 0.3);
      border-radius: 6px;
      font-size: 1rem;
      box-sizing: border-box;
    }
    
    .form-textarea {
      min-height: 100px;
      resize: vertical;
    }
    
    .submit-button {
      background: #d97706;
      color: white;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 6px;
      font-weight: 600;
      cursor: pointer;
      transition: background 0.2s;
    }
    
    .submit-button:hover {
      background: #b45309;
    }
    
    .submit-button:disabled {
      background: #9ca3af;
      cursor: not-allowed;
    }
    
    .submitted-notice {
      background: #d1fae5;
      border: 2px solid #059669;
      border-radius: 8px;
      padding: 1rem;
      color: #059669;
      font-weight: 600;
      text-align: center;
    }
    
         .no-project-notice {
       background: #fee2e2;
       border: 2px solid #dc2626;
       border-radius: 8px;
       padding: 1rem;
       color: #dc2626;
       font-weight: 600;
       text-align: center;
     }
     
     .toggle-switch {
       position: relative;
       display: inline-block;
       width: 50px;
       height: 24px;
     }
     
     .toggle-switch input {
       opacity: 0;
       width: 0;
       height: 0;
     }
     
     .toggle-slider {
       position: absolute;
       cursor: pointer;
       top: 0;
       left: 0;
       right: 0;
       bottom: 0;
       background-color: #ccc;
       transition: .4s;
       border-radius: 24px;
     }
     
     .toggle-slider:before {
       position: absolute;
       content: "";
       height: 18px;
       width: 18px;
       left: 3px;
       bottom: 3px;
       background-color: white;
       transition: .4s;
       border-radius: 50%;
     }
     
     input:checked + .toggle-slider {
       background-color: #d97706;
     }
     
     input:checked + .toggle-slider:before {
       transform: translateX(26px);
     }
     
    .fraud-link {
    display: inline-block;
    padding: 0.5rem 1rem;
    background: #6366f1;
    color: white;
    text-decoration: none;
    border-radius: 6px;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.2s ease;
    }
    
    .fraud-link:hover {
    background: #4f46e5;
    color: white;
    text-decoration: none;
    transform: translateY(-1px);
    }
     
     .unified-info-card {
       background: rgba(255, 255, 255, 0.95);
       border: 2px solid rgba(64, 43, 32, 0.15);
       border-radius: 16px;
       padding: 2rem;
       margin-bottom: 2rem;
     }
     
     .project-name-header {
       font-size: 2rem;
       font-weight: 700;
       color: #402b20;
       margin-bottom: 1rem;
     }
     
     .badge-row {
       display: flex;
       gap: 0.75rem;
       margin-bottom: 1.5rem;
       flex-wrap: wrap;
     }
     
     .info-grid {
       display: grid;
       grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
       gap: 1.5rem;
       margin-bottom: 1.5rem;
     }
     
     .button-row {
       display: flex;
       gap: 1rem;
       flex-wrap: wrap;
       margin-top: 1.5rem;
     }
     
     .action-button {
       padding: 0.5rem 1rem;
       border-radius: 6px;
       text-decoration: none;
       font-size: 0.9rem;
       font-weight: 500;
       transition: all 0.2s ease;
       display: inline-block;
     }
     
     .btn-primary {
       background: #6366f1;
       color: white;
     }
     
     .btn-primary:hover {
       background: #4f46e5;
       color: white;
       text-decoration: none;
     }
     
     .demo-analysis-grid {
       display: grid;
       grid-template-columns: 1fr 1fr;
       gap: 2rem;
       margin-bottom: 2rem;
     }
     
     @media (max-width: 768px) {
       .demo-analysis-grid {
         grid-template-columns: 1fr;
       }
     }
     
     .demo-container, .analysis-container {
       background: rgba(255, 255, 255, 0.95);
       border: 2px solid rgba(64, 43, 32, 0.15);
       border-radius: 16px;
       padding: 1.5rem;
     }
     
     .demo-iframe {
       width: 100%;
       height: 500px;
       border: 2px solid rgba(64, 43, 32, 0.1);
       border-radius: 8px;
       margin-top: 1rem;
     }
     
     #commit-graph {
       min-height: 400px;
       display: flex;
       align-items: center;
       justify-content: center;
       color: #6b5b4a;
       font-style: italic;
       border: 2px dashed rgba(64, 43, 32, 0.2);
       border-radius: 8px;
       margin-top: 1rem;
     }

     .slack-dm-button {
       background: #4A154B;
       color: white;
       padding: 0.5rem 1rem;
       border-radius: 6px;
       text-decoration: none;
       font-size: 0.9rem;
       font-weight: 500;
       transition: background-color 0.2s ease;
       display: inline-flex;
       align-items: center;
       gap: 0.5rem;
     }
     
     .slack-dm-button:hover {
       background: #3A0F3A;
       color: white;
       text-decoration: none;
     }
     
     .reviewer-feedback-section {
       margin-top: 2rem;
       padding-top: 1.5rem;
       border-top: 2px solid rgba(217, 119, 6, 0.2);
     }
     
     .reviewer-feedback-description {
       color: #6b5b4a;
       margin-bottom: 1.5rem;
     }
     
     .reviewer-feedback-textarea {
       min-height: 120px;
     }
     
     .reviewer-feedback-help {
       color: #6b5b4a;
       font-size: 0.8rem;
       margin-top: 0.5rem;
       display: block;
     }
     
     .refresh-cache-btn {
       padding: 0.75rem 1.5rem;
       background: #059669;
       color: white;
       border: none;
       border-radius: 8px;
       font-weight: 600;
       cursor: pointer;
       transition: all 0.2s;
       font-size: 0.9rem;
     }
     
     .refresh-cache-btn:hover {
       background: #047857;
       transform: translateY(-1px);
     }
  </style>
<% end %>

<div class="admin-container">


  <div class="page-header">
    <div style="display: flex; justify-content: space-between; align-items: flex-start; gap: 2rem;">
      <div>
        <h1 class="page-title"><%= @user.name %></h1>
        <p class="page-subtitle">Week <%= @selected_week %> Details</p>
      </div>
      <div style="display: flex; gap: 1rem; align-items: center;">
        <% if @user.slack_id.present? %>
          <a href="https://hackclub.slack.com/team/<%= @user.slack_id %>" 
             target="_blank" 
             class="slack-dm-button"
             title="Open Slack DM with <%= @user.name %>">
            💬 DM in Slack
          </a>
        <% end %>
        <%= button_to "📊 Clear GitHub Cache", admin_clear_github_cache_path, 
            method: :post, 
            class: "refresh-cache-btn",
            data: { confirm: "This will clear the GitHub commit cache. Fresh data will be loaded on next page load. Continue?" } %>
      </div>
    </div>
  </div>

  <% if @project %>
    <!-- Unified Project & User Information Card -->
    <div class="unified-info-card">
      <h1 class="project-name-header"><%= @project.name %></h1>
      
      <div class="badge-row">
        <span class="project-status <%= @project.status %>">
          <%= @project.status.humanize %>
        </span>
        <span class="fraud-status <%= @project.fraud_status %>">
          <%= @project.fraud_status.humanize %>
        </span>
      </div>
      
      <div class="info-grid">
        <div class="info-item">
          <span class="info-label">User Status</span>
          <span class="info-value"><%= @user.status.humanize %></span>
        </div>
        
        <div class="info-item">
          <span class="info-label">Time Spent</span>
          <span class="info-value">
            <%= @time_readable %>
            <% mercenary_count = mercenary_count_for_week(@user, @week) %>
            <% if mercenary_count > 0 %>
              <span style="font-size: 0.85rem; color: #8b4513; margin-left: 0.5rem;">(🪖 <%= mercenary_count %> - Goal: <%= effective_hour_goal(@user, @week) %>h)</span>
            <% end %>
          </span>
        </div>
        
        <% if @average_score %>
          <div class="info-item">
            <span class="info-label">Average Score</span>
            <span class="info-value"><%= @average_score %> / 5</span>
          </div>
        <% end %>
        
        <div class="info-item">
          <span class="info-label">Slack ID</span>
          <span class="info-value"><%= @user.slack_id %></span>
        </div>
        
        <div class="info-item">
          <span class="info-label">Hackatime Projects</span>
          <span class="info-value">
            <% if @project.hackatime_projects.present? && @project.hackatime_projects.any? %>
              <%= @project.hackatime_projects.join(', ') %>
            <% else %>
              None
            <% end %>
          </span>
        </div>
      </div>
      
      <% if @project.description.present? %>
        <div style="margin-bottom: 1.5rem;">
          <span class="info-label">Description</span>
          <p style="margin-top: 0.5rem; color: #402b20;"><%= @project.description %></p>
        </div>
      <% end %>
      
      <div class="button-row">
        <% if @project.repo_url.present? %>
          <a href="<%= @project.repo_url %>" target="_blank" class="action-button btn-primary">
            View Repository
          </a>
        <% end %>
        
        <% if @project.demo_url.present? %>
          <a href="<%= @project.demo_url %>" target="_blank" class="action-button btn-primary">
            View Demo
          </a>
        <% end %>
        
        <% if @user.slack_id.present? %>
          <a href="https://dash.fraud.land/profile/<%= @user.slack_id %>" target="_blank" class="action-button fraud-link">
            View Fraud Profile
          </a>
        <% end %>
        
        <%= link_to "View Review Page", review_project_path(@project), class: "action-button btn-primary", target: "_blank" %>
      </div>
    </div>



    <!-- Demo & GitHub Analysis Section -->
    <div class="demo-analysis-grid">
      <% if @project.demo_url.present? %>
        <div class="demo-container">
          <h2 class="card-title">Live Demo</h2>
          <iframe src="<%= @project.demo_url %>" class="demo-iframe" title="Project Demo" sandbox="allow-same-origin allow-scripts allow-forms" referrerpolicy="no-referrer"></iframe>
          <div style="margin-top: 1rem; text-align: center;">
            <a href="<%= @project.demo_url %>" target="_blank" style="color: #6366f1; text-decoration: none; font-weight: 500;">
              Open in New Tab ↗
            </a>
            <p style="font-size: 0.85rem; color: #6b5b4a; margin-top: 0.5rem;">
              If demo doesn't load above, it may block embedding. Use the link to open in a new tab.
            </p>
          </div>
        </div>
      <% else %>
        <div class="demo-container">
          <h2 class="card-title">Live Demo</h2>
          <div style="color: #6b5b4a; font-style: italic; padding: 2rem; text-align: center;">
            No demo URL provided
          </div>
        </div>
      <% end %>
      
      <div class="analysis-container">
        <h2 class="card-title">GitHub Commit Analysis</h2>
        <!-- GitHub commit graph will be implemented with JavaScript in future -->
        <div id="commit-graph">
          GitHub commit analysis will be added here
        </div>
      </div>
    </div>

    <!-- Admin Panels Grid -->
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; margin-top: 2rem;">
      
      <!-- Panel 1: Review & Airtable Submission -->
      <div class="review-panel">
        <h2 class="card-title">Review & Airtable Submission</h2>
        <p style="color: #6b5b4a; margin-bottom: 1.5rem;">
          Complete the review and submit to Airtable in one action.
        </p>

        <% if @submitted_to_airtable %>
          <div class="submitted-notice" style="margin-bottom: 1.5rem;">
            ✓ This project has already been submitted to Airtable
          </div>
        <% end %>

        <div class="form-group">
          <label class="form-label">Hour Override (optional):</label>
          <input type="number" id="hour-override" step="any" min="0" value="<%= @raw_hours %>" placeholder="Leave blank for no override" class="form-input" <%= 'disabled' if @submitted_to_airtable %>>
        </div>

        <div class="form-group">
          <label class="form-label">Airtable Comments:</label>
          <textarea id="airtable-comments" class="form-textarea" placeholder="Add any comments or justification for this submission..." <%= 'disabled' if @submitted_to_airtable %>></textarea>
        </div>

        <div class="form-group">
          <label class="form-label">Reviewer Feedback for <%= @user.name %>:</label>
          <textarea id="reviewer-feedback" class="form-textarea reviewer-feedback-textarea" placeholder="Add feedback for the project creator..."><%= @project.reviewer_feedback %></textarea>
          <small class="reviewer-feedback-help">
            This feedback will be shown to the user only when the project status is "finished".
          </small>
        </div>

        <div class="form-group">
          <label class="form-label">Reviewer Multiplier:</label>
          <input type="number" id="reviewer-multiplier" value="<%= @project&.reviewer_multiplier || 2.0 %>" min="0" step="0.1" class="form-input" placeholder="Reviewer multiplier (default: 2)" oninput="updateSuggestedCoins()">
          <small class="reviewer-feedback-help">
            This multiplier affects the suggested coin calculation.
          </small>
        </div>

        <div style="display: flex; gap: 0.5rem;">
          <% unless @submitted_to_airtable %>
            <button type="button" onclick="submitReviewAndAirtable()" class="submit-button" style="flex: 1; padding: 1rem; font-size: 1rem; font-weight: 600;">
              Save Review & Submit to Airtable
            </button>
          <% end %>
          
          <button type="button" onclick="saveReviewData()" class="submit-button" style="<%= @submitted_to_airtable ? 'width: 100%;' : 'flex: 1;' %> padding: 1rem; font-size: 1rem; font-weight: 600; background: #059669;">
            Save Review Data
          </button>
        </div>
        
        <!-- Display Existing Review Video if Present -->
        <% if @project&.reviewer_video&.attached? %>
          <div style="margin-top: 2rem; padding-top: 1.5rem; border-top: 2px solid rgba(217, 119, 6, 0.2);">
            <h4 style="margin-bottom: 1rem; color: #402b20;">📹 Review Video</h4>
            <div style="background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 8px; padding: 1rem; margin-bottom: 1rem;">
              <video controls style="width: 100%; max-height: 300px; border-radius: 6px;">
                <source src="<%= url_for(@project.reviewer_video) %>" type="<%= @project.reviewer_video.content_type %>">
                Your browser does not support the video tag.
              </video>
            </div>
            <div style="margin-top: 0.75rem; font-size: 0.85rem; color: #6b5b4a;">
              <strong>Video file:</strong> <%= @project.reviewer_video.filename %> 
              (<%= number_to_human_size(@project.reviewer_video.byte_size) %>)
            </div>
          </div>
        <% end %>
      </div>

      <!-- Panel 2: Project Management & Status -->
      <div class="user-management-panel">
        <h2 class="card-title">Project Management & Status</h2>
        <p style="color: #6b5b4a; margin-bottom: 1.5rem;">
          Manage coins, status, and finalize the project.
        </p>

        <!-- Project Statistics -->
        <div class="form-group">
          <label class="form-label">Project Statistics:</label>
          <div style="background: #f8fafc; padding: 1rem; border-radius: 8px; border: 1px solid #e2e8f0;">
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; font-size: 0.9rem;">
              <div>
                <strong>User Balance:</strong> <span id="current-user-balance"><%= @user.coins || 0 %></span> coins
              </div>
              <div>
                <strong>Current Project Value:</strong> <span id="current-project-value"><%= @project&.coin_value || 0 %></span> coins
              </div>
              <div>
                <strong>Hours Worked:</strong> <%= @raw_hours %>h
              </div>
              <div>
                <strong>Average Score:</strong> <%= @average_score || 0 %>/5
              </div>
              <div>
                <strong>Multiplier:</strong> <span id="saved-multiplier-display"><%= @project&.reviewer_multiplier || 2.0 %></span>x
              </div>
              <div>
                <strong>Calculated Coins:</strong> <span id="calculated-coins-display"><%= (@suggested_coins * (@project&.reviewer_multiplier || 2.0)).round %></span>
              </div>
            </div>
          </div>
        </div>

        <!-- Manual Coin Override -->
        <div class="form-group">
          <label class="form-label">Coin Award:</label>
          <div style="display: flex; gap: 0.5rem; align-items: center; margin-bottom: 0.5rem;">
            <input type="number" id="coin-balance" value="<%= (@suggested_coins * (@project&.reviewer_multiplier || 2.0)).round %>" class="form-input" style="flex: 1;" placeholder="Enter coin amount" oninput="markAsManuallyEdited()">
            <button type="button" onclick="resetToCalculated()" class="submit-button" style="background: #6366f1; font-size: 0.8rem; padding: 0.5rem;">Reset to Calculated</button>
          </div>
          <button type="button" onclick="finalizeProject()" class="submit-button" style="width: 100%; background: #059669; font-weight: 600;">
            Award Coins & Mark as Finished
          </button>
        </div>

        <!-- Arbitrary Offset Controls -->
        <div class="form-group">
          <label class="form-label">Hour Offset:</label>
          <div style="display: flex; gap: 0.5rem; align-items: center; margin-bottom: 0.5rem;">
            <select id="offset-week-select" class="form-input" style="flex: 1;" onchange="updateOffsetWeek()">
              <% (1..14).each do |week| %>
                <option value="<%= week %>" <%= 'selected' if week == @selected_week %>>
                  Week <%= week %> (<%= week == 5 ? '9h' : '10h' %> base)
                </option>
              <% end %>
            </select>
          </div>
          <div style="display: flex; gap: 0.5rem; align-items: center; margin-bottom: 0.5rem;">
            <input type="number" id="arbitrary-offset" value="0" class="form-input" style="flex: 1;" placeholder="Arbitrary offset (can be negative)">
            <button type="button" onclick="updateArbitraryOffset()" class="submit-button" style="background: #7c3aed; font-size: 0.8rem; padding: 0.5rem;">Update Offset</button>
          </div>
          <div id="offset-info" style="font-size: 0.8rem; color: #6b7280; margin-top: 0.5rem;">
            <div>Mercenary offset: <span id="mercenary-offset">0</span> hours</div>
            <div>Arbitrary offset: <span id="current-arbitrary-offset">0</span> hours</div>
            <div>Total offset: <span id="total-offset">0</span> hours</div>
            <div>Effective goal: <span id="effective-goal">10</span> hours</div>
          </div>
        </div>

        <!-- Project Status -->
        <div class="form-group">
          <label class="form-label">Project Status:</label>
          <select id="project-status-select" onchange="updateProjectStatus(this.value)" class="form-input">
            <option value="building" <%= 'selected' if @project&.status == 'building' %>>Building</option>
            <option value="submitted" <%= 'selected' if @project&.status == 'submitted' %>>Submitted</option>
            <option value="pending_voting" <%= 'selected' if @project&.status == 'pending_voting' %>>Pending Voting</option>
            <option value="waiting_for_review" <%= 'selected' if @project&.status == 'waiting_for_review' %>>Waiting for Finalization</option>
              <option value="finished" <%= 'selected' if @project&.status == 'finished' %>>Finished</option>
          </select>
          <small class="reviewer-feedback-help">
            Current: <span class="project-status <%= @project&.status %>"><%= @project&.status&.humanize || 'N/A' %></span>
          </small>
        </div>

        <!-- User Status -->
        <div class="form-group">
          <label class="form-label">User Status:</label>
          <select id="status-select" onchange="updateUserStatus(this.value)" class="form-input">
            <option value="working" <%= 'selected' if @user.status == 'working' %>>Working</option>
            <option value="out" <%= 'selected' if @user.status == 'out' %>>Out</option>
            <option value="banned" <%= 'selected' if @user.status == 'banned' %>>Banned</option>
            <option value="new" <%= 'selected' if @user.status == 'new' %>>New</option>
          </select>
          <small class="reviewer-feedback-help">
            <%= case @user.status
                when 'banned' then 'User is banned'
                when 'out' then 'User is marked as out (siege failed)'
                when 'working' then 'User is active'
                when 'new' then 'User is new (not through welcome)'
                else @user.status.humanize
                end %>
          </small>
        </div>

        <!-- Fraud Status Section -->
				<div class="form-group">
					<label class="form-label">Fraud Review:</label>
					<div style="background: #fef7f7; padding: 1rem; border-radius: 8px; border: 1px solid #fecaca;">
						<div style="margin-bottom: 0.75rem;">
							<strong>Current Status:</strong> 
							<span class="fraud-status-badge <%= @project.fraud_status %>" style="padding: 0.25rem 0.5rem; border-radius: 4px; font-size: 0.8rem; font-weight: 500;">
								<%= @project.fraud_status&.humanize || 'Unchecked' %>
							</span>
						</div>
						
						<div style="display: flex; gap: 0.5rem; margin-bottom: 0.75rem;">
							<select id="fraud-status-select" class="form-input" style="flex: 1;">
								<option value="unchecked" <%= 'selected' if @project.fraud_status == 'unchecked' %>>Unchecked</option>
								<option value="sus" <%= 'selected' if @project.fraud_status == 'sus' %>>Suspicious</option>
								<option value="fraud" <%= 'selected' if @project.fraud_status == 'fraud' %>>Confirmed Fraud</option>
								<option value="good" <%= 'selected' if @project.fraud_status == 'good' %>>Good/Verified</option>
							</select>
							<button type="button" onclick="updateFraudStatus()" class="submit-button" style="background: #dc2626; font-size: 0.8rem; padding: 0.5rem;">
								Update Fraud Status
							</button>
						</div>
						
						<textarea id="fraud-reasoning" class="form-textarea" placeholder="Add reasoning for fraud status change..." style="font-size: 0.85rem; min-height: 60px;"><%= @project.fraud_reasoning %></textarea>
					</div>
				</div>
      </div>
    </div>

    <script>
      let isManuallyEdited = false;
      const baseHours = <%= @raw_hours %>;
      const averageScore = <%= @average_score || 0 %>;
      const baseSuggestedCoins = <%= @suggested_coins %>;
      const storedMultiplier = <%= @project&.reviewer_multiplier || 2.0 %>;
      const calculatedAmount = Math.round(baseSuggestedCoins * storedMultiplier);

      function updateSuggestedCoins() {
        // Update the calculated amount display when multiplier changes
        const multiplier = parseFloat(document.getElementById('reviewer-multiplier').value) || 2.0;
        const newCalculatedAmount = Math.round(baseSuggestedCoins * multiplier);
        
        document.getElementById('calculated-coins-display').textContent = newCalculatedAmount;
        document.getElementById('saved-multiplier-display').textContent = multiplier;
        
        // Only update the input if not manually edited
        if (!isManuallyEdited) {
          document.getElementById('coin-balance').value = newCalculatedAmount;
        }
      }

      function markAsManuallyEdited() {
        isManuallyEdited = true;
      }

      function resetToCalculated() {
        isManuallyEdited = false;
        const multiplier = parseFloat(document.getElementById('reviewer-multiplier').value) || 2.0;
        const newCalculatedAmount = Math.round(baseSuggestedCoins * multiplier);
        document.getElementById('coin-balance').value = newCalculatedAmount;
        updateSuggestedCoins();
      }

      function saveMultiplier() {
        const multiplier = parseFloat(document.getElementById('reviewer-multiplier').value) || 0;
        
        if (confirm(`Save reviewer multiplier as ${multiplier}? This will be stored with the project.`)) {
          fetch('<%= admin_save_reviewer_multiplier_path(@selected_week, @user.id) %>', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ 
              multiplier: multiplier
            })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              alert('Reviewer multiplier saved successfully!');
            } else {
              alert('Error saving multiplier: ' + (data.error || 'Unknown error'));
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error saving multiplier. Please try again.');
          });
        }
      }

      function updateReviewerFeedback() {
        const feedback = document.getElementById('reviewer-feedback').value;
        
        fetch('<%= admin_update_reviewer_feedback_path(@selected_week, @user.id) %>', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          },
          body: JSON.stringify({ 
            reviewer_feedback: feedback
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            alert('Reviewer feedback updated successfully!');
          } else {
            alert('Error updating reviewer feedback: ' + (data.error || 'Unknown error'));
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error updating reviewer feedback. Please try again.');
        });
      }

      function updateCoins(useCalculated) {
        const coinBalance = document.getElementById('coin-balance').value;
        
        // Confirm the action
        const actionType = useCalculated ? 'calculated amount' : 'manual amount';
        const amount = useCalculated ? calculatedAmount : coinBalance;
        
        if (!confirm(`Add ${amount} coins using ${actionType}?`)) {
          return;
        }
        
        fetch('<%= admin_update_user_coins_path(@selected_week, @user.id) %>', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          },
          body: JSON.stringify({ 
            coins: parseInt(coinBalance),
            use_calculated: useCalculated.toString()
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Update the balance indicators
            if (data.new_user_balance !== undefined) {
              document.getElementById('current-user-balance').textContent = data.new_user_balance;
            }
            if (data.new_project_coin_value !== undefined) {
              document.getElementById('current-project-value').textContent = data.new_project_coin_value;
            }
            alert(data.message);
          } else {
            alert('Error updating coin balance: ' + (data.error || 'Unknown error'));
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error updating coin balance. Please try again.');
        });
      }

      function updateProjectStatus(newStatus) {
        if (confirm(`Are you sure you want to update the project status to ${newStatus}?`)) {
          fetch('<%= admin_update_project_status_path(@selected_week, @user.id) %>', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ 
              status: newStatus
            })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              alert('Project status updated successfully!');
              location.reload(); // Reload to update the status display
            } else {
              alert('Error updating project status: ' + (data.error || 'Unknown error'));
              // Revert the select
              location.reload();
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error updating project status. Please try again.');
            // Revert the select
            location.reload();
          });
        } else {
          // Revert the select if user cancels
          location.reload();
        }
      }

      function updateUserStatus(newStatus) {
        const currentStatus = '<%= @user.status %>';
        
        if (newStatus === currentStatus) {
          return; // No change needed
        }

        const statusMessages = {
          'working': 'mark this user as active/working',
          'out': 'mark this user as out (siege failed)',
          'banned': 'ban this user',
          'new': 'mark this user as new'
        };

        const message = `Are you sure you want to ${statusMessages[newStatus] || 'change user status'}?`;
        
        if (confirm(message)) {
          let endpoint = '';
          switch(newStatus) {
            case 'working':
              endpoint = 'set_active';
              break;
            case 'out':
              endpoint = 'set_out';
              break;
            case 'banned':
              endpoint = 'set_banned';
              break;
            default:
              alert('Invalid status selected');
              location.reload();
              return;
          }

          fetch(`/admin/users/<%= @user.id %>/${endpoint}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            }
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              alert('User status updated successfully!');
              location.reload();
            } else {
              alert('Error updating user status: ' + (data.error || 'Unknown error'));
              location.reload();
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error updating user status. Please try again.');
            location.reload();
          });
        } else {
          // Revert the select if user cancels
          location.reload();
        }
      }

      function updateOutStatus(isOut) {
        const action = isOut ? 'set_out' : 'set_active';
        const message = isOut ? 
          'Are you sure you want to mark this user as out? They will not be able to create or submit projects.' :
          'Are you sure you want to mark this user as active? They will be able to create and submit projects again.';
          
        if (confirm(message)) {
          fetch(`/admin/users/${<%= @user.id %>}/${action}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            }
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              location.reload();
            } else {
              alert('Error updating user status: ' + (data.error || 'Unknown error'));
              // Revert the toggle
              document.getElementById('out-status').checked = !isOut;
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error updating user status. Please try again.');
            // Revert the toggle
            document.getElementById('out-status').checked = !isOut;
          });
        } else {
          // Revert the toggle if user cancels
          document.getElementById('out-status').checked = !isOut;
        }
      }

      // New combined functions for refactored panels
      function saveReviewData() {
        const reviewerFeedback = document.getElementById('reviewer-feedback').value;
        const reviewerMultiplier = document.getElementById('reviewer-multiplier').value;

        // Save reviewer feedback and multiplier
        Promise.all([
          fetch(`<%= admin_update_reviewer_feedback_path(@selected_week, @user.id) %>`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ reviewer_feedback: reviewerFeedback })
          }),
          fetch(`<%= admin_save_reviewer_multiplier_path(@selected_week, @user.id) %>`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ multiplier: parseFloat(reviewerMultiplier) })
          })
        ])
        .then(responses => Promise.all(responses.map(r => r.json())))
        .then(results => {
          if (results.every(r => r.success)) {
            alert('Review data saved successfully!');
            updateSuggestedCoins(); // Refresh the calculated amounts
          } else {
            alert('Error saving review data. Please try again.');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error saving review data. Please try again.');
        });
      }

      function submitReviewAndAirtable() {
        const hourOverride = document.getElementById('hour-override').value;
        const airtableComments = document.getElementById('airtable-comments').value;
        const reviewerFeedback = document.getElementById('reviewer-feedback').value;
        const reviewerMultiplier = document.getElementById('reviewer-multiplier').value;

        if (!confirm('This will save the reviewer feedback, reviewer multiplier, and submit to Airtable. Continue?')) {
          return;
        }

        // First save reviewer feedback and multiplier
        Promise.all([
          fetch(`<%= admin_update_reviewer_feedback_path(@selected_week, @user.id) %>`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ reviewer_feedback: reviewerFeedback })
          }),
          fetch(`<%= admin_save_reviewer_multiplier_path(@selected_week, @user.id) %>`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ multiplier: parseFloat(reviewerMultiplier) })
          })
        ])
        .then(responses => Promise.all(responses.map(r => r.json())))
        .then(results => {
          if (results.every(r => r.success)) {
            // Then submit to Airtable using fetch
            return fetch('<%= admin_submit_to_airtable_path(@selected_week, @user.id) %>', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
              },
              body: JSON.stringify({
                hour_override: hourOverride,
                justification: airtableComments
              })
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                alert(data.message);
                location.reload(); // Reload to show updated status
              } else {
                alert('Error submitting to Airtable: ' + (data.error || 'Unknown error'));
              }
            });
          } else {
            alert('Error saving review data. Please try again.');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error saving review data. Please try again.');
        });
      }

      function finalizeProject() {
        const coinAmount = document.getElementById('coin-balance').value;
        
        if (!coinAmount || isNaN(coinAmount) || parseFloat(coinAmount) < 0) {
          alert('Please enter a valid coin amount.');
          return;
        }

        if (!confirm(`This will award ${coinAmount} coins and mark the project as finished. Continue?`)) {
          return;
        }

        // Award coins and mark as finished
        fetch(`<%= admin_update_user_coins_path(@selected_week, @user.id) %>`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          },
          body: JSON.stringify({ 
            coins: parseFloat(coinAmount),
            use_calculated: 'false'
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Update project status to finished
            return fetch(`<%= admin_update_project_status_path(@selected_week, @user.id) %>`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
              },
              body: JSON.stringify({ status: 'finished' })
            });
          } else {
            throw new Error(data.error || 'Failed to award coins');
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            alert('Project finalized successfully!');
            location.reload();
          } else {
            throw new Error(data.error || 'Failed to update project status');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error finalizing project: ' + error.message);
        });
      }

      function updateFraudStatus() {
        const fraudStatus = document.getElementById('fraud-status-select').value;
        const fraudReasoning = document.getElementById('fraud-reasoning').value;

        if (!confirm('Are you sure you want to update the fraud status?')) {
          return;
        }

        fetch(`<%= admin_update_fraud_status_path(@project) %>`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          },
          body: JSON.stringify({
            fraud_status: fraudStatus,
            fraud_reasoning: fraudReasoning
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            alert('Fraud status updated successfully!');
            location.reload();
          } else {
            alert('Error updating fraud status: ' + (data.error || 'Unknown error'));
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error updating fraud status. Please try again.');
        });
      }

      // Initialize offset controls with current week data
      function initializeOffsetControls() {
        updateOffsetWeek();
      }

      // Update offset controls when week selection changes
      function updateOffsetWeek() {
        const selectedWeek = document.getElementById('offset-week-select').value;
        
        // Fetch data for the selected week from the server
        fetch(`/admin/weekly-overview/${selectedWeek}/<%= @user.id %>/user_week_data`)
          .then(response => response.json())
          .then(data => {
            if (data.error) {
              console.error('Error fetching user week data:', data.error);
              return;
            }
            
            document.getElementById('arbitrary-offset').value = data.arbitrary_offset;
            document.getElementById('mercenary-offset').textContent = data.mercenary_offset;
            document.getElementById('current-arbitrary-offset').textContent = data.arbitrary_offset;
            document.getElementById('total-offset').textContent = data.total_offset;
            document.getElementById('effective-goal').textContent = data.effective_goal;
          })
          .catch(error => {
            console.error('Error:', error);
          });
      }

      // Update arbitrary offset
      function updateArbitraryOffset() {
        const selectedWeek = document.getElementById('offset-week-select').value;
        const newOffset = parseInt(document.getElementById('arbitrary-offset').value);
        
        if (isNaN(newOffset)) {
          alert('Please enter a valid offset value.');
          return;
        }

        if (!confirm(`This will set the arbitrary offset for week ${selectedWeek} to ${newOffset} hours. Continue?`)) {
          return;
        }

        const updatePath = `/admin/weekly-overview/${selectedWeek}/<%= @user.id %>/update_arbitrary_offset`;
        
        fetch(updatePath, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          },
          body: JSON.stringify({ 
            week: selectedWeek,
            arbitrary_offset: newOffset
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            alert(data.message);
            // Update the display with returned data
            document.getElementById('arbitrary-offset').value = data.new_arbitrary_offset;
            document.getElementById('current-arbitrary-offset').textContent = data.new_arbitrary_offset;
            document.getElementById('total-offset').textContent = data.total_offset;
            document.getElementById('effective-goal').textContent = data.new_effective_goal;
          } else {
            alert('Error updating offset: ' + (data.error || 'Unknown error'));
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error updating offset. Please try again.');
        });
      }

      // Initialize controls when page loads
      document.addEventListener('DOMContentLoaded', function() {
        initializeOffsetControls();
        <% if @project && @project.repo_url.present? %>
        loadGitHubCommits();
        <% end %>
      });

      // GitHub Commit Graph
      async function loadGitHubCommits() {
        const projectId = <%= @project.id %>;
        const weekNumber = <%= @selected_week %>;
        
        try {
          // Call server-side endpoint to fetch commit data
          const response = await fetch(`/admin/projects/${projectId}/github-commits?week=${weekNumber}`);
          
          if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || 'Failed to fetch commit data');
          }
          
          const data = await response.json();
          
          // Parse dates
          const weekStart = new Date(data.week_start);
          const weekEnd = new Date(data.week_end);
          
          // Convert commit data to expected format
          const weekCommits = data.week_commits.map(c => ({
            date: new Date(c.date),
            message: c.message,
            additions: c.additions,
            deletions: c.deletions,
            author: c.author
          }));
          
          renderCommitGraph(weekCommits, weekStart, weekEnd, data.before_week_commits, data.before_week_lines);
        } catch (error) {
          console.error('Error fetching commits:', error);
          document.getElementById('commit-graph').innerHTML = 
            '<p style="color: #dc2626;">Error loading commit data. Check console for details.</p>';
        }
      }
      
      function renderCommitGraph(commits, weekStart, weekEnd, beforeCount, beforeLines) {
        const container = document.getElementById('commit-graph');
        
        // Summary section
        let html = `
          <div style="margin-bottom: 1.5rem; padding: 1rem; background: rgba(255, 248, 220, 0.5); border-radius: 8px;">
            <h4 style="margin: 0 0 0.5rem 0; color: #402b20;">Repository History</h4>
            <p style="margin: 0; color: #6b5b4a;">
              <strong>${beforeCount}</strong> commits (≈${beforeLines.toLocaleString()} lines) before this week
            </p>
          </div>
        `;
        
        if (commits.length === 0) {
          html += '<p style="color: #6b5b4a; text-align: center;">No commits during this week</p>';
          container.innerHTML = html;
          return;
        }
        
        // Find max values for scaling
        const maxAdditions = Math.max(...commits.map(c => c.additions), 1);
        const maxDeletions = Math.max(...commits.map(c => c.deletions), 1);
        const maxChanges = Math.max(maxAdditions, maxDeletions, 1);
        
        // Create a unified grid container for both day labels and graph
        html += '<div style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 0; margin-bottom: 1rem;">';
        
        // Day labels row - Monday through Sunday
        const daysOfWeek = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
        for (let i = 0; i < 7; i++) {
          const date = new Date(weekStart);
          date.setDate(date.getDate() + i);
          html += `<div style="padding: 0.5rem; border-right: 1px solid rgba(64, 43, 32, 0.1); font-size: 0.8rem; color: #6b5b4a; text-align: center;"><strong>${daysOfWeek[i]}</strong><br>${date.getMonth() + 1}/${date.getDate()}</div>`;
        }
        
        // Graph area row - spans all 7 columns
        html += `<div style="grid-column: 1 / -1; position: relative; height: 300px; border: 1px solid rgba(64, 43, 32, 0.1); border-radius: 8px; padding: 1rem;">`;
        
        // Center line
        html += '<div style="position: absolute; left: 1rem; right: 1rem; top: 50%; height: 2px; background: rgba(64, 43, 32, 0.3); z-index: 1;"></div>';
        
        // Calculate total milliseconds in the week
        const weekDuration = weekEnd - weekStart;
        
        // Group commits within 6 hours of each other
        const SIX_HOURS_MS = 6 * 60 * 60 * 1000;
        const commitGroups = [];
        let currentGroup = [];
        
        commits.forEach((commit, i) => {
          if (currentGroup.length === 0) {
            currentGroup.push(commit);
          } else {
            const lastCommit = currentGroup[currentGroup.length - 1];
            if (Math.abs(commit.date - lastCommit.date) <= SIX_HOURS_MS) {
              currentGroup.push(commit);
            } else {
              commitGroups.push([...currentGroup]);
              currentGroup = [commit];
            }
          }
        });
        if (currentGroup.length > 0) {
          commitGroups.push(currentGroup);
        }
        
        // Plot commits - position based on exact timestamp within the week
        commitGroups.forEach(group => {
          // Use the first commit's timestamp for the group position
          const firstCommit = group[0];
          const timeIntoWeek = firstCommit.date - weekStart;
          const positionRatio = Math.max(0, Math.min(1, timeIntoWeek / weekDuration));
          
          // Plot each commit in the group with horizontal offset and different shades
          group.forEach((commit, stackIndex) => {
            // Calculate pixel position with stack offset
            const stackOffset = stackIndex * 14; // 12px bar + 2px gap
            const pixelOffset = `calc(1rem + (100% - 2rem) * ${positionRatio} - 6px + ${stackOffset}px)`;
            
            const addHeight = Math.max((commit.additions / maxChanges) * 130, 3);
            const delHeight = Math.max((commit.deletions / maxChanges) * 130, 3);
            
            const escapeAttr = (str) => String(str).replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]));
            const commitTitle = escapeAttr(`${commit.message}\nAdditions: +${commit.additions}\nDeletions: -${commit.deletions}\nAuthor: ${commit.author}`);
            
            // Calculate opacity based on stack position (darker = more recent)
            const opacity = 1 - (stackIndex * 0.15);
            
            // Addition bar (extends upward)
            html += `<div style="position: absolute; left: ${pixelOffset}; bottom: calc(50% + 1px); width: 12px; background: rgba(5, 150, 105, ${opacity}); height: ${addHeight}px; border-radius: 2px 2px 0 0; z-index: ${2 + stackIndex}; cursor: pointer;" title="${commitTitle}"></div>`;
            
            // Deletion bar (extends downward)
            html += `<div style="position: absolute; left: ${pixelOffset}; top: calc(50% + 1px); width: 12px; background: rgba(220, 38, 38, ${opacity}); height: ${delHeight}px; border-radius: 0 0 2px 2px; z-index: ${2 + stackIndex}; cursor: pointer;" title="${commitTitle}"></div>`;
          });
        });
        
        html += '</div>'; // Close graph area
        html += '</div>'; // Close grid container
        
        // Legend
        html += `
          <div style="padding: 1rem; background: rgba(255, 255, 255, 0.5); border-radius: 8px;">
            <div style="display: flex; flex-direction: column; gap: 0.75rem; font-size: 0.9rem;">
              <div><span style="display: inline-block; width: 12px; height: 12px; background: #059669; margin-right: 0.5rem; border-radius: 2px;"></span>Lines Added</div>
              <div><span style="display: inline-block; width: 12px; height: 12px; background: #dc2626; margin-right: 0.5rem; border-radius: 2px;"></span>Lines Deleted</div>
              <div style="margin-top: 0.5rem; padding-top: 0.75rem; border-top: 1px solid rgba(64, 43, 32, 0.1);"><strong>${commits.length}</strong> commit${commits.length !== 1 ? 's' : ''} this week</div>
            </div>
          </div>
        `;
        
        container.innerHTML = html;
      }
    </script>

    <!-- Review Status History -->
    <% if @project.logs.any? %>
      <div class="card" style="margin-top: 2rem;">
        <h2 class="card-title">Review Status History</h2>
        <div style="max-height: 400px; overflow-y: auto;">
          <% @project.logs.reverse.each do |log| %>
            <div style="padding: 1rem; border-bottom: 1px solid rgba(64, 43, 32, 0.1); margin-bottom: 0.5rem;">
              <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 0.5rem;">
                <div>
                  <span style="font-weight: 600; color: #dc2626;"><%= log['old_status']&.humanize || 'N/A' %></span>
                  <span style="color: #6b5b4a; margin: 0 0.5rem;">→</span>
                  <span style="font-weight: 600; color: #059669;"><%= log['new_status']&.humanize || 'N/A' %></span>
                </div>
                <div style="font-size: 0.85rem; color: #6b5b4a;">
                  <%= Time.parse(log['timestamp']).strftime("%m/%d/%Y %I:%M %p") rescue log['timestamp'] %>
                </div>
              </div>
              <div style="font-size: 0.9rem; color: #402b20;">
                <strong>Reviewer:</strong> <%= log['reviewer_name'] %> (ID: <%= log['reviewer_id'] %>)
              </div>
              <% if log['message'].present? %>
                <div style="margin-top: 0.5rem; padding: 0.5rem; background: rgba(255, 248, 220, 0.3); border-radius: 4px; font-size: 0.9rem; color: #6b5b4a;">
                  <%= log['message'] %>
                </div>
              <% end %>
            </div>
          <% end %>
        </div>
      </div>
    <% end %>

    <!-- Fraud Audit History -->
    <% fraud_logs = @user.audit_logs.select { |log| log['action']&.include?('fraud') && log['details']&.dig('project_id') == @project.id } %>
    <% if fraud_logs.any? %>
      <div class="card" style="margin-top: 2rem;">
        <h2 class="card-title">Fraud Status History</h2>
        <div style="max-height: 400px; overflow-y: auto;">
          <% fraud_logs.reverse.each do |log| %>
            <div style="padding: 1rem; border-bottom: 1px solid rgba(64, 43, 32, 0.1); margin-bottom: 0.5rem;">
              <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 0.5rem;">
                <div>
                  <span style="font-weight: 600; color: #dc2626;"><%= log['details']['old_fraud_status']&.humanize || 'N/A' %></span>
                  <span style="color: #6b5b4a; margin: 0 0.5rem;">→</span>
                  <span style="font-weight: 600; color: #059669;"><%= log['details']['new_fraud_status']&.humanize || 'N/A' %></span>
                </div>
                <div style="font-size: 0.85rem; color: #6b5b4a;">
                  <%= Time.parse(log['timestamp']).strftime("%m/%d/%Y %I:%M %p") rescue log['timestamp'] %>
                </div>
              </div>
              <div style="font-size: 0.9rem; color: #402b20;">
                <strong>Reviewer:</strong> <%= log['actor_name'] %> (ID: <%= log['actor_id'] %>)
              </div>
              <% if log['details']['old_reasoning'].present? %>
                <div style="margin-top: 0.5rem;">
                  <div style="font-size: 0.85rem; color: #6b5b4a; font-weight: 600;">Old Reasoning:</div>
                  <div style="padding: 0.5rem; background: rgba(255, 240, 240, 0.3); border-radius: 4px; font-size: 0.9rem; color: #6b5b4a;">
                    <%= log['details']['old_reasoning'] %>
                  </div>
                </div>
              <% end %>
              <% if log['details']['new_reasoning'].present? %>
                <div style="margin-top: 0.5rem;">
                  <div style="font-size: 0.85rem; color: #6b5b4a; font-weight: 600;">New Reasoning:</div>
                  <div style="padding: 0.5rem; background: rgba(240, 255, 240, 0.3); border-radius: 4px; font-size: 0.9rem; color: #6b5b4a;">
                    <%= log['details']['new_reasoning'] %>
                  </div>
                </div>
              <% end %>
            </div>
          <% end %>
        </div>
      </div>
    <% end %>

  <% else %>
    <div class="no-project-notice">
      No project found for <%= @user.name %> in week <%= @selected_week %>
    </div>
  <% end %>
</div>
