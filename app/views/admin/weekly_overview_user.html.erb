<% content_for :title, "Admin - Weekly Overview - #{@user.name}" %>

<% content_for :head do %>
  <style>
    .admin-container {
      max-width: 1200px;
      margin: 0 auto;
      margin-left: 20rem; /* Account for navbar */
      padding: 2rem;
    }

@media (max-width: 768px) {
  .admin-container {
    margin-left: auto; /* Reset to auto on mobile */
    margin-top: 12rem; /* Position content below navbar */
  }
}
    
    .back-link {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      color: #6366f1;
      text-decoration: none;
      margin-bottom: 2rem;
      font-weight: 500;
    }
    
    .back-link:hover {
      color: #4f46e5;
      text-decoration: none;
    }
    
    .page-header {
      margin-bottom: 2rem;
    }
    
    .page-title {
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 0.5rem;
      color: #402b20;
    }
    
    .page-subtitle {
      font-size: 1.1rem;
      color: #6b5b4a;
    }
    
    .content-grid {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 2rem;
      margin-bottom: 2rem;
    }
    
    @media (max-width: 768px) {
      .content-grid {
        grid-template-columns: 1fr;
      }
    }
    
    .card {
      background: rgba(255, 255, 255, 0.95);
      border: 2px solid rgba(64, 43, 32, 0.15);
      border-radius: 16px;
      padding: 1.5rem;
    }
    
    .card-title {
      font-size: 1.25rem;
      font-weight: 700;
      margin-bottom: 1rem;
      color: #402b20;
    }
    
    .user-info {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 1rem;
    }
    
    .info-item {
      display: flex;
      flex-direction: column;
    }
    
    .info-label {
      font-size: 0.9rem;
      color: #6b5b4a;
      margin-bottom: 0.25rem;
    }
    
    .info-value {
      font-weight: 600;
      color: #402b20;
    }
    
    .project-status {
      display: inline-block;
      padding: 0.25rem 0.75rem;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: 600;
      text-transform: uppercase;
    }
    
    .project-status.building { background-color: #dbeafe; color: #1e40af; }
    .project-status.submitted { background-color: #d1fae5; color: #059669; }
    .project-status.pending_voting { background-color: #fef3c7; color: #d97706; }
    .project-status.finished { background-color: #e5e7eb; color: #374151; }
    
    .fraud-status {
      display: inline-block;
      padding: 0.25rem 0.75rem;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: 600;
      text-transform: uppercase;
    }
    
    .fraud-status.unchecked { background-color: #fbbf24; color: #92400e; }
    .fraud-status.sus { background-color: #f59e0b; color: white; }
    .fraud-status.fraud { background-color: #dc2626; color: white; }
    .fraud-status.good { background-color: #059669; color: white; }
    
    .votes-list {
      margin-top: 1rem;
    }
    
    .vote-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.75rem;
      background: rgba(255, 255, 255, 0.5);
      border: 1px solid rgba(64, 43, 32, 0.1);
      border-radius: 8px;
      margin-bottom: 0.5rem;
    }
    
    .vote-user {
      font-weight: 600;
      color: #402b20;
    }
    
    .vote-score {
      font-weight: 700;
      color: #d97706;
    }
    
    .ballot-link {
      color: #6366f1;
      text-decoration: none;
      font-size: 0.9rem;
    }
    
    .ballot-link:hover {
      text-decoration: underline;
    }
    
         .review-panel, .user-management-panel {
       background: rgba(255, 248, 220, 0.8);
       border: 2px solid rgba(217, 119, 6, 0.3);
       border-radius: 16px;
       padding: 1.5rem;
     }
     
     .user-management-panel {
       background: rgba(220, 248, 255, 0.8);
       border: 2px solid rgba(6, 119, 217, 0.3);
     }
    
    .form-group {
      margin-bottom: 1rem;
    }
    
    .form-label {
      display: block;
      font-weight: 600;
      color: #402b20;
      margin-bottom: 0.5rem;
    }
    
    .form-input, .form-textarea {
      width: 100%;
      padding: 0.75rem;
      border: 2px solid rgba(64, 43, 32, 0.3);
      border-radius: 6px;
      font-size: 1rem;
      box-sizing: border-box;
    }
    
    .form-textarea {
      min-height: 100px;
      resize: vertical;
    }
    
    .submit-button {
      background: #d97706;
      color: white;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 6px;
      font-weight: 600;
      cursor: pointer;
      transition: background 0.2s;
    }
    
    .submit-button:hover {
      background: #b45309;
    }
    
    .submit-button:disabled {
      background: #9ca3af;
      cursor: not-allowed;
    }
    
    .submitted-notice {
      background: #d1fae5;
      border: 2px solid #059669;
      border-radius: 8px;
      padding: 1rem;
      color: #059669;
      font-weight: 600;
      text-align: center;
    }
    
         .no-project-notice {
       background: #fee2e2;
       border: 2px solid #dc2626;
       border-radius: 8px;
       padding: 1rem;
       color: #dc2626;
       font-weight: 600;
       text-align: center;
     }
     
     .toggle-switch {
       position: relative;
       display: inline-block;
       width: 50px;
       height: 24px;
     }
     
     .toggle-switch input {
       opacity: 0;
       width: 0;
       height: 0;
     }
     
     .toggle-slider {
       position: absolute;
       cursor: pointer;
       top: 0;
       left: 0;
       right: 0;
       bottom: 0;
       background-color: #ccc;
       transition: .4s;
       border-radius: 24px;
     }
     
     .toggle-slider:before {
       position: absolute;
       content: "";
       height: 18px;
       width: 18px;
       left: 3px;
       bottom: 3px;
       background-color: white;
       transition: .4s;
       border-radius: 50%;
     }
     
     input:checked + .toggle-slider {
       background-color: #d97706;
     }
     
     input:checked + .toggle-slider:before {
       transform: translateX(26px);
     }
     
    .fraud-link {
    display: inline-block;
    padding: 0.5rem 1rem;
    background: #6366f1;
    color: white;
    text-decoration: none;
    border-radius: 6px;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.2s ease;
    }
    
    .fraud-link:hover {
    background: #4f46e5;
    color: white;
    text-decoration: none;
    transform: translateY(-1px);
    }

     .slack-dm-button {
       background: #4A154B;
       color: white;
       padding: 0.5rem 1rem;
       border-radius: 6px;
       text-decoration: none;
       font-size: 0.9rem;
       font-weight: 500;
       transition: background-color 0.2s ease;
       display: inline-flex;
       align-items: center;
       gap: 0.5rem;
     }
     
     .slack-dm-button:hover {
       background: #3A0F3A;
       color: white;
       text-decoration: none;
     }
     
     .reviewer-feedback-section {
       margin-top: 2rem;
       padding-top: 1.5rem;
       border-top: 2px solid rgba(217, 119, 6, 0.2);
     }
     
     .reviewer-feedback-description {
       color: #6b5b4a;
       margin-bottom: 1.5rem;
     }
     
     .reviewer-feedback-textarea {
       min-height: 120px;
     }
     
     .reviewer-feedback-help {
       color: #6b5b4a;
       font-size: 0.8rem;
       margin-top: 0.5rem;
       display: block;
     }
  </style>
<% end %>

<div class="admin-container">


  <div class="page-header">
    <div style="display: flex; justify-content: space-between; align-items: flex-start; gap: 2rem;">
      <div>
        <h1 class="page-title"><%= @user.name %></h1>
        <p class="page-subtitle">Week <%= @selected_week %> Details</p>
      </div>
      <% if @user.slack_id.present? %>
        <a href="https://app.slack.com/client/T0266FRGM/D0266FRGM/user_profile/<%= @user.slack_id %>" 
           target="_blank" 
           class="slack-dm-button"
           title="Open Slack DM with <%= @user.name %>">
          ðŸ’¬ DM in Slack
        </a>
      <% end %>
    </div>
  </div>

  <% if @project %>
    <div class="content-grid">
      <!-- Project & Voting Information -->
      <div class="card">
        <h2 class="card-title">Project Information</h2>
        
        <div class="user-info">
          <div class="info-item">
            <span class="info-label">Project Name</span>
            <span class="info-value"><%= @project.name %></span>
          </div>
          
          <div class="info-item">
            <span class="info-label">Status</span>
            <span class="project-status <%= @project.status %>">
              <%= @project.status.humanize %>
            </span>
          </div>
          
					<div class="info-item">
						<span class="info-label">Fraud Status</span>
						<span class="fraud-status <%= @project.fraud_status %>">
							<%= @project.fraud_status.humanize %>
						</span>
					</div>
          
          <div class="info-item">
            <span class="info-label">Time Spent</span>
            <span class="info-value"><%= @time_readable %></span>
          </div>
          
          <% if @average_score %>
            <div class="info-item">
              <span class="info-label">Average Score</span>
              <span class="info-value"><%= @average_score %> / 5</span>
            </div>
          <% end %>
          
          <div class="info-item">
            <span class="info-label">Repository</span>
            <span class="info-value">
              <% if @project.repo_url.present? %>
                <a href="<%= @project.repo_url %>" target="_blank" style="color: #6366f1;">
                  <%= @project.repo_url.split('/').last %>
                </a>
              <% else %>
                Not provided
              <% end %>
            </span>
          </div>
          
          <div class="info-item">
            <span class="info-label">Demo URL</span>
            <span class="info-value">
              <% if @project.demo_url.present? %>
                <a href="<%= @project.demo_url %>" target="_blank" style="color: #6366f1;">
                  View Demo
                </a>
              <% else %>
                Not provided
              <% end %>
            </span>
          </div>
        </div>

        <% if @project.description.present? %>
          <div style="margin-top: 1rem;">
            <span class="info-label">Description</span>
            <p style="margin-top: 0.5rem; color: #402b20;"><%= @project.description %></p>
          </div>
        <% end %>

        <% if @votes.any? %>
          <h3 style="margin-top: 2rem; margin-bottom: 1rem; color: #402b20;">Votes Received</h3>
          <div class="votes-list">
            <% @votes.each do |vote| %>
              <div class="vote-item" style="<%= vote.voted? ? '' : 'opacity: 0.6;' %>">
                <div>
                  <span class="vote-user"><%= vote.ballot.user.name %></span>
                  <br>
                  <span class="ballot-link">
                    <%= link_to "View Ballot", admin_ballot_details_path(vote.ballot), target: "_blank" %>
                  </span>
                  <% unless vote.voted? %>
                    <br>
                    <span style="color: #dc2626; font-size: 0.8rem; font-style: italic;">(Not cast)</span>
                  <% end %>
                </div>
                <span class="vote-score">
                  <% if vote.voted? %>
                    <%= vote.star_count %> / 5
                  <% else %>
                    <span style="color: #6b7280; font-style: italic;">Not voted</span>
                  <% end %>
                </span>
              </div>
            <% end %>
          </div>
        <% end %>
      </div>

      <!-- User Information -->
      <div class="card">
        <h2 class="card-title">User Information</h2>
        
        <div class="user-info">
          <div class="info-item">
            <span class="info-label">Email</span>
            <span class="info-value"><%= @user.email || "Not provided" %></span>
          </div>
          
          <div class="info-item">
            <span class="info-label">Slack ID</span>
            <span class="info-value"><%= @user.slack_id %></span>
          </div>
          
          <div class="info-item">
            <span class="info-label">Balance</span>
            <span class="info-value"><%= @user.coins || 0 %> coins</span>
          </div>
          
          <div class="info-item">
            <span class="info-label">Rank</span>
            <span class="info-value"><%= @user.rank.humanize %></span>
          </div>
          
          <div class="info-item">
            <span class="info-label">Status</span>
            <span class="info-value"><%= @user.status.humanize %></span>
          </div>
        </div>
        
        <% if @user.slack_id.present? %>
          <div style="margin-top: 1rem; text-align: center;">
            <a href="https://dash.fraud.land/profile/<%= @user.slack_id %>" target="_blank" class="fraud-link">
              View Fraud.land Profile
            </a>
          </div>
        <% end %>

        <% if @address %>
          <h3 style="margin-top: 1.5rem; margin-bottom: 1rem; color: #402b20;">Address Information</h3>
          <div class="user-info">
            <div class="info-item">
              <span class="info-label">Name</span>
              <span class="info-value"><%= @address.first_name %> <%= @address.last_name %></span>
            </div>
            
            <div class="info-item">
              <span class="info-label">Shipping Name</span>
              <span class="info-value"><%= @address.shipping_name || "Not provided" %></span>
            </div>
            
            <div class="info-item">
              <span class="info-label">Address</span>
              <span class="info-value">
                <%= @address.line_one %><br>
                <% if @address.line_two.present? %>
                  <%= @address.line_two %><br>
                <% end %>
                <%= @address.city %>, <%= @address.state %> <%= @address.postcode %><br>
                <%= @address.country %>
              </span>
            </div>
            
            <div class="info-item">
              <span class="info-label">Birthday</span>
              <span class="info-value"><%= @address.birthday || "Not provided" %></span>
            </div>
          </div>
        <% end %>
      </div>
    </div>

    <!-- Admin Panels Grid -->
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; margin-top: 2rem;">
      
      <!-- Panel 1: Review & Airtable Submission -->
      <div class="review-panel">
        <h2 class="card-title">Review & Airtable Submission</h2>
        <p style="color: #6b5b4a; margin-bottom: 1.5rem;">
          Complete the review and submit to Airtable in one action.
        </p>

        <% if @submitted_to_airtable %>
          <div class="submitted-notice" style="margin-bottom: 1.5rem;">
            âœ“ This project has already been submitted to Airtable
          </div>
        <% end %>

        <div class="form-group">
          <label class="form-label">Hour Override (optional):</label>
          <input type="number" id="hour-override" step="any" min="0" value="<%= @raw_hours %>" placeholder="Leave blank for no override" class="form-input" <%= 'disabled' if @submitted_to_airtable %>>
        </div>

        <div class="form-group">
          <label class="form-label">Airtable Comments:</label>
          <textarea id="airtable-comments" class="form-textarea" placeholder="Add any comments or justification for this submission..." <%= 'disabled' if @submitted_to_airtable %>></textarea>
        </div>

        <div class="form-group">
          <label class="form-label">Reviewer Feedback for <%= @user.name %>:</label>
          <textarea id="reviewer-feedback" class="form-textarea reviewer-feedback-textarea" placeholder="Add feedback for the project creator..."><%= @project.reviewer_feedback %></textarea>
          <small class="reviewer-feedback-help">
            This feedback will be shown to the user only when the project status is "finished".
          </small>
        </div>

        <div class="form-group">
          <label class="form-label">Reviewer Multiplier:</label>
          <input type="number" id="reviewer-multiplier" value="<%= @project&.reviewer_multiplier || 2.0 %>" min="0" step="0.1" class="form-input" placeholder="Reviewer multiplier (default: 2)" oninput="updateSuggestedCoins()">
          <small class="reviewer-feedback-help">
            This multiplier affects the suggested coin calculation.
          </small>
        </div>

        <div style="display: flex; gap: 0.5rem;">
          <% unless @submitted_to_airtable %>
            <button type="button" onclick="submitReviewAndAirtable()" class="submit-button" style="flex: 1; padding: 1rem; font-size: 1rem; font-weight: 600;">
              Save Review & Submit to Airtable
            </button>
          <% end %>
          
          <button type="button" onclick="saveReviewData()" class="submit-button" style="<%= @submitted_to_airtable ? 'width: 100%;' : 'flex: 1;' %> padding: 1rem; font-size: 1rem; font-weight: 600; background: #059669;">
            Save Review Data
          </button>
        </div>
        
        <!-- Display Existing Review Video if Present -->
        <% if @project&.reviewer_video&.attached? %>
          <div style="margin-top: 2rem; padding-top: 1.5rem; border-top: 2px solid rgba(217, 119, 6, 0.2);">
            <h4 style="margin-bottom: 1rem; color: #402b20;">ðŸ“¹ Review Video</h4>
            <div style="background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 8px; padding: 1rem; margin-bottom: 1rem;">
              <video controls style="width: 100%; max-height: 300px; border-radius: 6px;">
                <source src="<%= url_for(@project.reviewer_video) %>" type="<%= @project.reviewer_video.content_type %>">
                Your browser does not support the video tag.
              </video>
            </div>
            <div style="margin-top: 0.75rem; font-size: 0.85rem; color: #6b5b4a;">
              <strong>Video file:</strong> <%= @project.reviewer_video.filename %> 
              (<%= number_to_human_size(@project.reviewer_video.byte_size) %>)
            </div>
          </div>
        <% end %>
      </div>

      <!-- Panel 2: Project Management & Status -->
      <div class="user-management-panel">
        <h2 class="card-title">Project Management & Status</h2>
        <p style="color: #6b5b4a; margin-bottom: 1.5rem;">
          Manage coins, status, and finalize the project.
        </p>

        <!-- Project Statistics -->
        <div class="form-group">
          <label class="form-label">Project Statistics:</label>
          <div style="background: #f8fafc; padding: 1rem; border-radius: 8px; border: 1px solid #e2e8f0;">
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; font-size: 0.9rem;">
              <div>
                <strong>User Balance:</strong> <span id="current-user-balance"><%= @user.coins || 0 %></span> coins
              </div>
              <div>
                <strong>Current Project Value:</strong> <span id="current-project-value"><%= @project&.coin_value || 0 %></span> coins
              </div>
              <div>
                <strong>Hours Worked:</strong> <%= @raw_hours %>h
              </div>
              <div>
                <strong>Average Score:</strong> <%= @average_score || 0 %>/5
              </div>
              <div>
                <strong>Multiplier:</strong> <span id="saved-multiplier-display"><%= @project&.reviewer_multiplier || 2.0 %></span>x
              </div>
              <div>
                <strong>Calculated Coins:</strong> <span id="calculated-coins-display"><%= (@suggested_coins * (@project&.reviewer_multiplier || 2.0)).round %></span>
              </div>
            </div>
          </div>
        </div>

        <!-- Manual Coin Override -->
        <div class="form-group">
          <label class="form-label">Coin Award:</label>
          <div style="display: flex; gap: 0.5rem; align-items: center; margin-bottom: 0.5rem;">
            <input type="number" id="coin-balance" value="<%= (@suggested_coins * (@project&.reviewer_multiplier || 2.0)).round %>" class="form-input" style="flex: 1;" placeholder="Enter coin amount" oninput="markAsManuallyEdited()">
            <button type="button" onclick="resetToCalculated()" class="submit-button" style="background: #6366f1; font-size: 0.8rem; padding: 0.5rem;">Reset to Calculated</button>
          </div>
          <button type="button" onclick="finalizeProject()" class="submit-button" style="width: 100%; background: #059669; font-weight: 600;">
            Award Coins & Mark as Finished
          </button>
        </div>

        <!-- Project Status -->
        <div class="form-group">
          <label class="form-label">Project Status:</label>
          <select id="project-status-select" onchange="updateProjectStatus(this.value)" class="form-input">
            <option value="building" <%= 'selected' if @project&.status == 'building' %>>Building</option>
            <option value="submitted" <%= 'selected' if @project&.status == 'submitted' %>>Submitted</option>
            <option value="pending_voting" <%= 'selected' if @project&.status == 'pending_voting' %>>Pending Voting</option>
            <option value="finished" <%= 'selected' if @project&.status == 'finished' %>>Finished</option>
          </select>
          <small class="reviewer-feedback-help">
            Current: <span class="project-status <%= @project&.status %>"><%= @project&.status&.humanize || 'N/A' %></span>
          </small>
        </div>

        <!-- User Status -->
        <div class="form-group">
          <label class="form-label">User Status:</label>
          <select id="status-select" onchange="updateUserStatus(this.value)" class="form-input">
            <option value="working" <%= 'selected' if @user.status == 'working' %>>Working</option>
            <option value="out" <%= 'selected' if @user.status == 'out' %>>Out</option>
            <option value="banned" <%= 'selected' if @user.status == 'banned' %>>Banned</option>
            <option value="new" <%= 'selected' if @user.status == 'new' %>>New</option>
          </select>
          <small class="reviewer-feedback-help">
            <%= case @user.status
                when 'banned' then 'User is banned'
                when 'out' then 'User is marked as out (siege failed)'
                when 'working' then 'User is active'
                when 'new' then 'User is new (not through welcome)'
                else @user.status.humanize
                end %>
          </small>
        </div>

        <!-- Fraud Status Section -->
				<div class="form-group">
					<label class="form-label">Fraud Review:</label>
					<div style="background: #fef7f7; padding: 1rem; border-radius: 8px; border: 1px solid #fecaca;">
						<div style="margin-bottom: 0.75rem;">
							<strong>Current Status:</strong> 
							<span class="fraud-status-badge <%= @project.fraud_status %>" style="padding: 0.25rem 0.5rem; border-radius: 4px; font-size: 0.8rem; font-weight: 500;">
								<%= @project.fraud_status&.humanize || 'Unchecked' %>
							</span>
						</div>
						
						<div style="display: flex; gap: 0.5rem; margin-bottom: 0.75rem;">
							<select id="fraud-status-select" class="form-input" style="flex: 1;">
								<option value="unchecked" <%= 'selected' if @project.fraud_status == 'unchecked' %>>Unchecked</option>
								<option value="sus" <%= 'selected' if @project.fraud_status == 'sus' %>>Suspicious</option>
								<option value="fraud" <%= 'selected' if @project.fraud_status == 'fraud' %>>Confirmed Fraud</option>
								<option value="good" <%= 'selected' if @project.fraud_status == 'good' %>>Good/Verified</option>
							</select>
							<button type="button" onclick="updateFraudStatus()" class="submit-button" style="background: #dc2626; font-size: 0.8rem; padding: 0.5rem;">
								Update Fraud Status
							</button>
						</div>
						
						<textarea id="fraud-reasoning" class="form-textarea" placeholder="Add reasoning for fraud status change..." style="font-size: 0.85rem; min-height: 60px;"><%= @project.fraud_reasoning %></textarea>
					</div>
				</div>
      </div>
    </div>

    <script>
      let isManuallyEdited = false;
      const baseHours = <%= @raw_hours %>;
      const averageScore = <%= @average_score || 0 %>;
      const baseSuggestedCoins = <%= @suggested_coins %>;
      const storedMultiplier = <%= @project&.reviewer_multiplier || 2.0 %>;
      const calculatedAmount = Math.round(baseSuggestedCoins * storedMultiplier);

      function updateSuggestedCoins() {
        // Update the calculated amount display when multiplier changes
        const multiplier = parseFloat(document.getElementById('reviewer-multiplier').value) || 2.0;
        const newCalculatedAmount = Math.round(baseSuggestedCoins * multiplier);
        
        document.getElementById('calculated-coins-display').textContent = newCalculatedAmount;
        document.getElementById('saved-multiplier-display').textContent = multiplier;
        
        // Only update the input if not manually edited
        if (!isManuallyEdited) {
          document.getElementById('coin-balance').value = newCalculatedAmount;
        }
      }

      function markAsManuallyEdited() {
        isManuallyEdited = true;
      }

      function resetToCalculated() {
        isManuallyEdited = false;
        const multiplier = parseFloat(document.getElementById('reviewer-multiplier').value) || 2.0;
        const newCalculatedAmount = Math.round(baseSuggestedCoins * multiplier);
        document.getElementById('coin-balance').value = newCalculatedAmount;
        updateSuggestedCoins();
      }

      function saveMultiplier() {
        const multiplier = parseFloat(document.getElementById('reviewer-multiplier').value) || 0;
        
        if (confirm(`Save reviewer multiplier as ${multiplier}? This will be stored with the project.`)) {
          fetch('<%= admin_save_reviewer_multiplier_path(@selected_week, @user.id) %>', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ 
              multiplier: multiplier
            })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              alert('Reviewer multiplier saved successfully!');
            } else {
              alert('Error saving multiplier: ' + (data.error || 'Unknown error'));
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error saving multiplier. Please try again.');
          });
        }
      }

      function updateReviewerFeedback() {
        const feedback = document.getElementById('reviewer-feedback').value;
        
        fetch('<%= admin_update_reviewer_feedback_path(@selected_week, @user.id) %>', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          },
          body: JSON.stringify({ 
            reviewer_feedback: feedback
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            alert('Reviewer feedback updated successfully!');
          } else {
            alert('Error updating reviewer feedback: ' + (data.error || 'Unknown error'));
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error updating reviewer feedback. Please try again.');
        });
      }

      function updateCoins(useCalculated) {
        const coinBalance = document.getElementById('coin-balance').value;
        
        // Confirm the action
        const actionType = useCalculated ? 'calculated amount' : 'manual amount';
        const amount = useCalculated ? calculatedAmount : coinBalance;
        
        if (!confirm(`Add ${amount} coins using ${actionType}?`)) {
          return;
        }
        
        fetch('<%= admin_update_user_coins_path(@selected_week, @user.id) %>', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          },
          body: JSON.stringify({ 
            coins: parseInt(coinBalance),
            use_calculated: useCalculated.toString()
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Update the balance indicators
            if (data.new_user_balance !== undefined) {
              document.getElementById('current-user-balance').textContent = data.new_user_balance;
            }
            if (data.new_project_coin_value !== undefined) {
              document.getElementById('current-project-value').textContent = data.new_project_coin_value;
            }
            alert(data.message);
          } else {
            alert('Error updating coin balance: ' + (data.error || 'Unknown error'));
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error updating coin balance. Please try again.');
        });
      }

      function updateProjectStatus(newStatus) {
        if (confirm(`Are you sure you want to update the project status to ${newStatus}?`)) {
          fetch('<%= admin_update_project_status_path(@selected_week, @user.id) %>', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ 
              status: newStatus
            })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              alert('Project status updated successfully!');
              location.reload(); // Reload to update the status display
            } else {
              alert('Error updating project status: ' + (data.error || 'Unknown error'));
              // Revert the select
              location.reload();
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error updating project status. Please try again.');
            // Revert the select
            location.reload();
          });
        } else {
          // Revert the select if user cancels
          location.reload();
        }
      }

      function updateUserStatus(newStatus) {
        const currentStatus = '<%= @user.status %>';
        
        if (newStatus === currentStatus) {
          return; // No change needed
        }

        const statusMessages = {
          'working': 'mark this user as active/working',
          'out': 'mark this user as out (siege failed)',
          'banned': 'ban this user',
          'new': 'mark this user as new'
        };

        const message = `Are you sure you want to ${statusMessages[newStatus] || 'change user status'}?`;
        
        if (confirm(message)) {
          let endpoint = '';
          switch(newStatus) {
            case 'working':
              endpoint = 'set_active';
              break;
            case 'out':
              endpoint = 'set_out';
              break;
            case 'banned':
              endpoint = 'set_banned';
              break;
            default:
              alert('Invalid status selected');
              location.reload();
              return;
          }

          fetch(`/admin/users/<%= @user.id %>/${endpoint}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            }
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              alert('User status updated successfully!');
              location.reload();
            } else {
              alert('Error updating user status: ' + (data.error || 'Unknown error'));
              location.reload();
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error updating user status. Please try again.');
            location.reload();
          });
        } else {
          // Revert the select if user cancels
          location.reload();
        }
      }

      function updateOutStatus(isOut) {
        const action = isOut ? 'set_out' : 'set_active';
        const message = isOut ? 
          'Are you sure you want to mark this user as out? They will not be able to create or submit projects.' :
          'Are you sure you want to mark this user as active? They will be able to create and submit projects again.';
          
        if (confirm(message)) {
          fetch(`/admin/users/${<%= @user.id %>}/${action}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            }
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              location.reload();
            } else {
              alert('Error updating user status: ' + (data.error || 'Unknown error'));
              // Revert the toggle
              document.getElementById('out-status').checked = !isOut;
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error updating user status. Please try again.');
            // Revert the toggle
            document.getElementById('out-status').checked = !isOut;
          });
        } else {
          // Revert the toggle if user cancels
          document.getElementById('out-status').checked = !isOut;
        }
      }

      // New combined functions for refactored panels
      function saveReviewData() {
        const reviewerFeedback = document.getElementById('reviewer-feedback').value;
        const reviewerMultiplier = document.getElementById('reviewer-multiplier').value;

        // Save reviewer feedback and multiplier
        Promise.all([
          fetch(`<%= admin_update_reviewer_feedback_path(@selected_week, @user.id) %>`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ reviewer_feedback: reviewerFeedback })
          }),
          fetch(`<%= admin_save_reviewer_multiplier_path(@selected_week, @user.id) %>`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ multiplier: parseFloat(reviewerMultiplier) })
          })
        ])
        .then(responses => Promise.all(responses.map(r => r.json())))
        .then(results => {
          if (results.every(r => r.success)) {
            alert('Review data saved successfully!');
            updateSuggestedCoins(); // Refresh the calculated amounts
          } else {
            alert('Error saving review data. Please try again.');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error saving review data. Please try again.');
        });
      }

      function submitReviewAndAirtable() {
        const hourOverride = document.getElementById('hour-override').value;
        const airtableComments = document.getElementById('airtable-comments').value;
        const reviewerFeedback = document.getElementById('reviewer-feedback').value;
        const reviewerMultiplier = document.getElementById('reviewer-multiplier').value;

        if (!confirm('This will save the reviewer feedback, reviewer multiplier, and submit to Airtable. Continue?')) {
          return;
        }

        // First save reviewer feedback and multiplier
        Promise.all([
          fetch(`<%= admin_update_reviewer_feedback_path(@selected_week, @user.id) %>`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ reviewer_feedback: reviewerFeedback })
          }),
          fetch(`<%= admin_save_reviewer_multiplier_path(@selected_week, @user.id) %>`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ multiplier: parseFloat(reviewerMultiplier) })
          })
        ])
        .then(responses => Promise.all(responses.map(r => r.json())))
        .then(results => {
          if (results.every(r => r.success)) {
            // Then submit to Airtable
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '<%= admin_submit_to_airtable_path(@selected_week, @user.id) %>';
            
            const csrfInput = document.createElement('input');
            csrfInput.type = 'hidden';
            csrfInput.name = 'authenticity_token';
            csrfInput.value = document.querySelector('meta[name="csrf-token"]').content;
            form.appendChild(csrfInput);
            
            if (hourOverride) {
              const hourInput = document.createElement('input');
              hourInput.type = 'hidden';
              hourInput.name = 'hour_override';
              hourInput.value = hourOverride;
              form.appendChild(hourInput);
            }
            
            if (airtableComments) {
              const commentsInput = document.createElement('input');
              commentsInput.type = 'hidden';
              commentsInput.name = 'justification';
              commentsInput.value = airtableComments;
              form.appendChild(commentsInput);
            }
            
            document.body.appendChild(form);
            form.submit();
          } else {
            alert('Error saving review data. Please try again.');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error saving review data. Please try again.');
        });
      }

      function finalizeProject() {
        const coinAmount = document.getElementById('coin-balance').value;
        
        if (!coinAmount || isNaN(coinAmount) || parseFloat(coinAmount) < 0) {
          alert('Please enter a valid coin amount.');
          return;
        }

        if (!confirm(`This will award ${coinAmount} coins and mark the project as finished. Continue?`)) {
          return;
        }

        // Award coins and mark as finished
        fetch(`<%= admin_update_user_coins_path(@selected_week, @user.id) %>`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          },
          body: JSON.stringify({ 
            coins: parseFloat(coinAmount),
            use_calculated: 'false'
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Update project status to finished
            return fetch(`<%= admin_update_project_status_path(@selected_week, @user.id) %>`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
              },
              body: JSON.stringify({ status: 'finished' })
            });
          } else {
            throw new Error(data.error || 'Failed to award coins');
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            alert('Project finalized successfully!');
            location.reload();
          } else {
            throw new Error(data.error || 'Failed to update project status');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error finalizing project: ' + error.message);
        });
      }

      function updateFraudStatus() {
        const fraudStatus = document.getElementById('fraud-status-select').value;
        const fraudReasoning = document.getElementById('fraud-reasoning').value;

        if (!confirm('Are you sure you want to update the fraud status?')) {
          return;
        }

        fetch(`<%= admin_update_fraud_status_path(@project) %>`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          },
          body: JSON.stringify({
            fraud_status: fraudStatus,
            fraud_reasoning: fraudReasoning
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            alert('Fraud status updated successfully!');
            location.reload();
          } else {
            alert('Error updating fraud status: ' + (data.error || 'Unknown error'));
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error updating fraud status. Please try again.');
        });
      }
    </script>

  <% else %>
    <div class="no-project-notice">
      No project found for <%= @user.name %> in week <%= @selected_week %>
    </div>
  <% end %>
</div>
