  <style>
  .navbar {
    width: 13rem;
    padding: 1.25rem;
    margin: 2rem 0.5rem 2rem 2rem;
    color: var(--text-brown, #3b2a1a);
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
    container-type: inline-size;
  }
  @media (min-width: 640px) {
    .navbar { margin: 2.5rem 1rem 2.5rem 2.5rem; }
  }
  .navbar-header {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    max-width: 100%;
  }
  .avatar {
    height: 3rem;
    width: 3rem;
    /* organic, slightly random blob shape */
    border-radius: 28% 38% 22% 42% / 35% 25% 45% 30%;
    overflow: hidden;
    flex-shrink: 0;
    position: relative;
    border: 2px solid rgba(120, 84, 55, 0.5);
    background-color: rgba(246, 236, 206, 0.5);
    transform: rotate(-2deg);
  }
  .avatar img {
    display: block;
    height: 100%;
    width: 100%;
    object-fit: cover;
    opacity: 0.9;
    mix-blend-mode: multiply;
  }
  .avatar::after {
    content: "";
    position: absolute;
    inset: 0;
    background-image: url('<%= asset_path("parchment-texture.jpg") %>');
    background-size: cover;
    background-position: center;
    opacity: 0.18;
    mix-blend-mode: multiply;
    pointer-events: none;
    border-radius: inherit;
  }
  .avatar::before {
    content: "";
    position: absolute;
    inset: 0;
    box-shadow: inset 0 0 8px rgba(0,0,0,0.12);
    pointer-events: none;
    border-radius: inherit;
  }
  .user-meta { flex: none; min-width: 0; }
  .user-name {
    font-family: "Jaini", "IM Fell English", serif;
    font-weight: 600;
    display: block;
    line-height: 1.1;
    font-size: clamp(1.2rem, 12cqi, 1.8rem);
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  .navbar-nav {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    font-size: 1.7rem;
    font-weight: 700;
    text-align: center;
  }
  .navbar-link {
    text-decoration: none;
    color: inherit;
    padding: 0.9rem 1.1rem;
    border-radius: 0.75rem;
    display: block;
    position: relative;
  }
  .navbar-link::after {
    content: "";
    position: absolute;
    left: 50%;
    bottom: 0.1rem;
    width: 60%;
    height: 18px;
    transform: translateX(-50%) translateY(2px);
    background-image: url('<%= asset_path("underline.webp") %>');
    background-repeat: no-repeat;
    background-size: 100% 100%;
    background-position: center bottom;
    opacity: 0;
    transition: opacity 160ms ease, transform 160ms ease;
    pointer-events: none;
  }
  .navbar-link:hover::after,
  .navbar-link.active::after {
    opacity: 1;
    transform: translateX(-50%) translateY(0);
  }

  .navbar-link--disabled {
    pointer-events: none;
    cursor: not-allowed;
    opacity: 0.5;
  }
  .navbar-link--disabled::after { opacity: 0; }

  .navbar-link--admin {
    color: inherit;
    border: 4px dashed oklch(78.7% 0.168 66.29);
  }
  .navbar-link--admin:hover {
    color: inherit;
  }
  .navbar-link--admin.active {
    color: inherit;
  }

  /* Decorative double border */
  .navbar::before,
  .navbar::after {
    content: "";
    position: absolute;
    inset: 0;
    border-radius: inherit;
    pointer-events: none;
  }
  .navbar::before {
    border: 3px solid rgba(64, 43, 32, 0.75);
  }
  .navbar::after {
    inset: 6px;
    border: 3px dashed rgba(64, 43, 32, 0.55);
  }

  /* Decorative images */
  .navbar-decoration {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    width: 72px;
    height: 24px;
    background-image: url('<%= asset_path("decoration.png") %>');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    pointer-events: none;
    z-index: 1;
  }
  .navbar-decoration.top {
    top: -24px;
  }
  .navbar-decoration.bottom {
    bottom: -23px;
    transform: translateX(-50%) rotate(180deg);
    pointer-events: auto;
  }
</style>
<aside class="navbar">
  <div class="navbar-decoration top" aria-hidden="true"></div>
  <div class="navbar-header">
    <% if user_signed_in? && current_user %>
      <% slack_id = current_user.slack_id.presence %>
      <% avatar_url = slack_id ? "https://cachet.dunkirk.sh/users/#{slack_id}/r" : nil %>
      <% if avatar_url.present? %>
        <div class="avatar">
          <img src="<%= avatar_url %>" alt="Avatar" loading="lazy" referrerpolicy="no-referrer" onerror="this.onerror=null;this.src='/icon.png';" />
        </div>
      <% end %>
      <div class="user-meta">
        <h2 class="user-name"><%= current_user.current_slack_display_name.presence || "" %></h2>
      </div>
    <% end %>
  </div>
  <nav class="navbar-nav">
    <%= link_to "Keep", keep_path, class: "navbar-link #{'active' if current_page?(keep_path)}" %>
    <%= link_to "Armory", projects_path, class: "navbar-link #{'active' if current_page?(projects_path)}" %>
    <%= link_to "Great Hall", great_hall_path, class: "navbar-link #{'active' if current_page?(great_hall_path)}" %>
    <% if Flipper.enabled?(:market_enabled, current_user) %>
      <%= link_to "Market", market_path, class: "navbar-link #{'active' if current_page?(market_path)}" %>
    <% else %>
      <span class="navbar-link navbar-link--disabled">Market</span>
    <% end %>
    <%= link_to "Chambers", chambers_path, class: "navbar-link #{'active' if current_page?(chambers_path)}" %>
    <% if can_access_review? %>
      <%= link_to "Review", review_path, class: "navbar-link navbar-link--admin #{'active' if current_page?(review_path)}" %>
    <% end %>
    <% if can_access_fraud_dashboard? %>
      <%= link_to "Greg", greg_path, class: "navbar-link navbar-link--admin #{'active' if current_page?(greg_path)}" %>
    <% end %>
    <% if can_access_admin? %>
      <%= link_to "Admin", admin_path, class: "navbar-link navbar-link--admin #{'active' if current_page?(admin_path)}" %>
    <% end %>
  </nav>
  <div class="navbar-decoration bottom" id="admin-key-trigger" aria-hidden="true"></div>
</aside>
<script>
  (function() {
    function initMessyAvatar() {
      var avatar = document.querySelector('.navbar .avatar');
      if (!avatar || avatar.dataset.messyInit === '1') return;
      avatar.dataset.messyInit = '1';
      var userKey = '<%= (current_user&.slack_id.presence || "guest") %>';
      var storageKey = 'messyAvatar:' + userKey;
      var now = Date.now();
      var oneDayMs = 24 * 60 * 60 * 1000;

      function rand(min, max) { return Math.round(Math.random() * (max - min) + min); }

      function generateShape() {
        var tl = rand(18, 46);
        var tr = rand(30, 60);
        var br = rand(12, 44);
        var bl = rand(28, 58);
        var v1 = rand(22, 52);
        var v2 = rand(15, 45);
        var v3 = rand(28, 60);
        var v4 = rand(18, 48);
        var radius = tl + '% ' + tr + '% ' + br + '% ' + bl + '% / ' + v1 + '% ' + v2 + '% ' + v3 + '% ' + v4 + '%';
        var rot = (Math.random() * 8 - 4).toFixed(1); // -4deg to 4deg
        return { radius: radius, rot: rot };
      }

      function applyShape(radius, rot) {
        avatar.style.borderRadius = radius;
        avatar.style.transform = 'rotate(' + rot + 'deg)';
      }

      var cached = null;
      try { cached = JSON.parse(localStorage.getItem(storageKey) || 'null'); } catch (e) { cached = null; }

      if (cached && cached.expiresAt && cached.radius && cached.rot && now < cached.expiresAt) {
        applyShape(cached.radius, cached.rot);
      } else {
        var shape = generateShape();
        applyShape(shape.radius, shape.rot);
        var expiresAt = now + oneDayMs;
        try { localStorage.setItem(storageKey, JSON.stringify({ radius: shape.radius, rot: shape.rot, expiresAt: expiresAt })); } catch (e) {}
      }
    }

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initMessyAvatar, { once: true });
    } else {
      initMessyAvatar();
    }
  })();

       // Admin key verification
   (function() {
     const adminTrigger = document.getElementById('admin-key-trigger');
     if (!adminTrigger) return;

             adminTrigger.addEventListener('click', function() {
        showModalPrompt(
          'Enter admin key:',
          'Admin Access',
          (key) => {
            if (!key) return;

            fetch('/verify_admin_key', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
              },
              body: JSON.stringify({ admin_key: key })
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                showModalPrompt(
                  'Admin key verified! Select your rank:\n\nuser - Basic user\nviewer - Can view projects\nadmin - Can manage users\nsuper_admin - Full admin access\n\nEnter rank:',
                  'Select Rank',
                  (rank) => {
                    if (!rank) return;

                    fetch('/set_rank', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
                      },
                      body: JSON.stringify({ rank: rank.toLowerCase() })
                    })
                    .then(response => response.json())
                    .then(rankData => {
                      if (rankData.success) {
                        showModalAlert(rankData.message, 'Success');
                        location.reload();
                      } else {
                        showModalAlert(rankData.message, 'Error');
                      }
                    })
                    .catch(error => {
                      console.error('Error:', error);
                      showModalAlert('An error occurred while setting the rank.', 'Error');
                    });
                  },
                  () => {},
                  'Enter rank'
                );
              } else {
                showModalAlert(data.message, 'Error');
              }
            })
            .catch(error => {
              console.error('Error:', error);
              showModalAlert('An error occurred while verifying the key.', 'Error');
            });
          },
          () => {},
          'Enter admin key'
        );
      });
   })();
</script>
